import { __decorate, __metadata } from "tslib";
import { DynamicInputControlModel } from "../dynamic-input-control.model";
import { serializable } from "../../decorator/serializable.decorator";
import { maskToString } from "../../utils/json.utils";
import { isBoolean, isFunction, isNumber } from "../../utils/core.utils";
import { isObservable, of } from "rxjs";
import { tap } from "rxjs/operators";
export const DYNAMIC_FORM_CONTROL_TYPE_INPUT = "INPUT";
export const DYNAMIC_FORM_CONTROL_INPUT_TYPE_COLOR = "color";
export const DYNAMIC_FORM_CONTROL_INPUT_TYPE_DATE = "date";
//export const DYNAMIC_FORM_CONTROL_INPUT_TYPE_DATETIME = "datetime";
export const DYNAMIC_FORM_CONTROL_INPUT_TYPE_DATETIME_LOCAL = "datetime-local";
export const DYNAMIC_FORM_CONTROL_INPUT_TYPE_EMAIL = "email";
export const DYNAMIC_FORM_CONTROL_INPUT_TYPE_FILE = "file";
export const DYNAMIC_FORM_CONTROL_INPUT_TYPE_MONTH = "month";
export const DYNAMIC_FORM_CONTROL_INPUT_TYPE_NUMBER = "number";
export const DYNAMIC_FORM_CONTROL_INPUT_TYPE_PASSWORD = "password";
export const DYNAMIC_FORM_CONTROL_INPUT_TYPE_RANGE = "range";
export const DYNAMIC_FORM_CONTROL_INPUT_TYPE_SEARCH = "search";
export const DYNAMIC_FORM_CONTROL_INPUT_TYPE_TEL = "tel";
export const DYNAMIC_FORM_CONTROL_INPUT_TYPE_TEXT = "text";
export const DYNAMIC_FORM_CONTROL_INPUT_TYPE_TIME = "time";
export const DYNAMIC_FORM_CONTROL_INPUT_TYPE_URL = "url";
export const DYNAMIC_FORM_CONTROL_INPUT_TYPE_WEEK = "week";
export class DynamicInputModel extends DynamicInputControlModel {
    constructor(config, layout) {
        var _a, _b, _c, _d;
        super(config, layout);
        this.files = null;
        this.list$ = null;
        this._list = null;
        this._listId = null;
        this.type = DYNAMIC_FORM_CONTROL_TYPE_INPUT;
        this.accept = (_a = config.accept) !== null && _a !== void 0 ? _a : null;
        this.inputType = (_b = config.inputType) !== null && _b !== void 0 ? _b : DYNAMIC_FORM_CONTROL_INPUT_TYPE_TEXT;
        this.mask = (_c = config.mask) !== null && _c !== void 0 ? _c : null;
        this.max = config.max !== undefined ? config.max : null;
        this.min = config.min !== undefined ? config.min : null;
        this.multiple = isBoolean(config.multiple) ? config.multiple : null;
        this.pattern = (_d = config.pattern) !== null && _d !== void 0 ? _d : null;
        this.step = isNumber(config.step) ? config.step : null;
        if (config.list !== undefined) {
            this.list = config.list;
            this._listId = `${this.id}List`;
        }
    }
    get listId() {
        return this._listId;
    }
    get hasList() {
        return isObservable(this.list$);
    }
    set list(list) {
        if (Array.isArray(list)) {
            this._list = list;
            this.list$ = of(this._list);
        }
        else if (isObservable(list)) {
            this.list$ = list.pipe(tap(list => this._list = list));
        }
        else {
            this._list = null;
            this.list$ = null;
        }
    }
    toJSON() {
        const json = super.toJSON();
        if (this.mask !== null) {
            json.mask = isFunction(this.mask) ? this.mask : maskToString(this.mask);
        }
        return json;
    }
}
__decorate([
    serializable(),
    __metadata("design:type", String)
], DynamicInputModel.prototype, "accept", void 0);
__decorate([
    serializable(),
    __metadata("design:type", String)
], DynamicInputModel.prototype, "inputType", void 0);
__decorate([
    serializable(),
    __metadata("design:type", Object)
], DynamicInputModel.prototype, "mask", void 0);
__decorate([
    serializable(),
    __metadata("design:type", Object)
], DynamicInputModel.prototype, "max", void 0);
__decorate([
    serializable(),
    __metadata("design:type", Object)
], DynamicInputModel.prototype, "min", void 0);
__decorate([
    serializable(),
    __metadata("design:type", Boolean)
], DynamicInputModel.prototype, "multiple", void 0);
__decorate([
    serializable(),
    __metadata("design:type", String)
], DynamicInputModel.prototype, "pattern", void 0);
__decorate([
    serializable(),
    __metadata("design:type", Number)
], DynamicInputModel.prototype, "step", void 0);
__decorate([
    serializable("list"),
    __metadata("design:type", Array)
], DynamicInputModel.prototype, "_list", void 0);
__decorate([
    serializable(),
    __metadata("design:type", String)
], DynamicInputModel.prototype, "type", void 0);
//# sourceMappingURL=data:application/json;base64,