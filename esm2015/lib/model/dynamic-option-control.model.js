import { __decorate, __metadata } from "tslib";
import { isObservable, of } from "rxjs";
import { map } from "rxjs/operators";
import { DynamicFormValueControlModel } from "./dynamic-form-value-control.model";
import { serializable, serialize } from "../decorator/serializable.decorator";
import { isBoolean } from "../utils/core.utils";
export class DynamicFormOption {
    constructor(config) {
        var _a;
        this.disabled = isBoolean(config.disabled) ? config.disabled : false;
        this.label = (_a = config.label) !== null && _a !== void 0 ? _a : null;
        this.value = config.value;
    }
    get text() {
        return this.label;
    }
    set text(text) {
        this.label = text;
    }
    toJSON() {
        return serialize(this);
    }
}
__decorate([
    serializable(),
    __metadata("design:type", Boolean)
], DynamicFormOption.prototype, "disabled", void 0);
__decorate([
    serializable(),
    __metadata("design:type", String)
], DynamicFormOption.prototype, "label", void 0);
__decorate([
    serializable(),
    __metadata("design:type", Object)
], DynamicFormOption.prototype, "value", void 0);
export class DynamicOptionControlModel extends DynamicFormValueControlModel {
    constructor(config, layout) {
        super(config, layout);
        this._options = [];
        this.options = config.options;
    }
    updateOptions$() {
        this.options$ = of(this.options);
    }
    set options(options) {
        if (Array.isArray(options)) {
            this._options = options.map(optionConfig => new DynamicFormOption(optionConfig));
            this.updateOptions$();
        }
        else if (isObservable(options)) {
            this.options$ = options.pipe(map(optionsConfig => {
                this._options = optionsConfig.map(optionConfig => new DynamicFormOption(optionConfig));
                return this._options;
            }));
        }
        else {
            this.updateOptions$();
        }
    }
    get options() {
        return this._options;
    }
    add(optionConfig) {
        return this.insert(this.options.length, optionConfig);
    }
    get(index) {
        return this.options[index];
    }
    insert(index, optionConfig) {
        const option = new DynamicFormOption(optionConfig);
        this.options.splice(index, 0, option);
        this.updateOptions$();
        return option;
    }
    remove(...indices) {
        indices.forEach(index => this.options.splice(index, 1));
        this.updateOptions$();
    }
}
__decorate([
    serializable("options"),
    __metadata("design:type", Array)
], DynamicOptionControlModel.prototype, "_options", void 0);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1vcHRpb24tY29udHJvbC5tb2RlbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZy1keW5hbWljLWZvcm1zL2NvcmUvIiwic291cmNlcyI6WyJsaWIvbW9kZWwvZHluYW1pYy1vcHRpb24tY29udHJvbC5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFjLFlBQVksRUFBRSxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDcEQsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3JDLE9BQU8sRUFBRSw0QkFBNEIsRUFBc0MsTUFBTSxvQ0FBb0MsQ0FBQztBQUV0SCxPQUFPLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQzlFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQVNoRCxNQUFNLE9BQU8saUJBQWlCO0lBTTFCLFlBQVksTUFBa0M7O1FBRTFDLElBQUksQ0FBQyxRQUFRLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQ3JFLElBQUksQ0FBQyxLQUFLLFNBQUcsTUFBTSxDQUFDLEtBQUssbUNBQUksSUFBSSxDQUFDO1FBQ2xDLElBQUksQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQztJQUM5QixDQUFDO0lBRUQsSUFBSSxJQUFJO1FBQ0osT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3RCLENBQUM7SUFFRCxJQUFJLElBQUksQ0FBQyxJQUFtQjtRQUN4QixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztJQUN0QixDQUFDO0lBRUQsTUFBTTtRQUNGLE9BQU8sU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzNCLENBQUM7Q0FDSjtBQXRCbUI7SUFBZixZQUFZLEVBQUU7O21EQUFtQjtBQUNsQjtJQUFmLFlBQVksRUFBRTs7Z0RBQXNCO0FBQ3JCO0lBQWYsWUFBWSxFQUFFOztnREFBVTtBQTJCN0IsTUFBTSxPQUFnQix5QkFBNkIsU0FBUSw0QkFBcUM7SUFLNUYsWUFBc0IsTUFBMEMsRUFBRSxNQUFpQztRQUUvRixLQUFLLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBTE8sYUFBUSxHQUEyQixFQUFFLENBQUM7UUFPbkUsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDO0lBQ2xDLENBQUM7SUFFTyxjQUFjO1FBQ2xCLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRUQsSUFBSSxPQUFPLENBQUMsT0FBWTtRQUVwQixJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFFeEIsSUFBSSxDQUFDLFFBQVEsR0FBSSxPQUF3QyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLElBQUksaUJBQWlCLENBQUksWUFBWSxDQUFDLENBQUMsQ0FBQztZQUV0SCxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7U0FFekI7YUFBTSxJQUFJLFlBQVksQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUU5QixJQUFJLENBQUMsUUFBUSxHQUFJLE9BQW9ELENBQUMsSUFBSSxDQUN0RSxHQUFHLENBQUMsYUFBYSxDQUFDLEVBQUU7Z0JBRWhCLElBQUksQ0FBQyxRQUFRLEdBQUcsYUFBYSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLElBQUksaUJBQWlCLENBQUksWUFBWSxDQUFDLENBQUMsQ0FBQztnQkFFMUYsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO1lBQ3pCLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FFWDthQUFNO1lBRUgsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1NBQ3pCO0lBQ0wsQ0FBQztJQUVELElBQUksT0FBTztRQUNQLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN6QixDQUFDO0lBRUQsR0FBRyxDQUFDLFlBQXdDO1FBQ3hDLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxZQUFZLENBQUMsQ0FBQztJQUMxRCxDQUFDO0lBRUQsR0FBRyxDQUFDLEtBQWE7UUFDYixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVELE1BQU0sQ0FBQyxLQUFhLEVBQUUsWUFBd0M7UUFFMUQsTUFBTSxNQUFNLEdBQUcsSUFBSSxpQkFBaUIsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUVuRCxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3RDLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUV0QixPQUFPLE1BQU0sQ0FBQztJQUNsQixDQUFDO0lBRUQsTUFBTSxDQUFDLEdBQUcsT0FBaUI7UUFFdkIsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3hELElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUMxQixDQUFDO0NBR0o7QUFuRTRCO0lBQXhCLFlBQVksQ0FBQyxTQUFTLENBQUM7OzJEQUErQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUsIGlzT2JzZXJ2YWJsZSwgb2YgfSBmcm9tIFwicnhqc1wiO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSBcInJ4anMvb3BlcmF0b3JzXCI7XG5pbXBvcnQgeyBEeW5hbWljRm9ybVZhbHVlQ29udHJvbE1vZGVsLCBEeW5hbWljRm9ybVZhbHVlQ29udHJvbE1vZGVsQ29uZmlnIH0gZnJvbSBcIi4vZHluYW1pYy1mb3JtLXZhbHVlLWNvbnRyb2wubW9kZWxcIjtcbmltcG9ydCB7IER5bmFtaWNGb3JtQ29udHJvbExheW91dCB9IGZyb20gXCIuL21pc2MvZHluYW1pYy1mb3JtLWNvbnRyb2wtbGF5b3V0Lm1vZGVsXCI7XG5pbXBvcnQgeyBzZXJpYWxpemFibGUsIHNlcmlhbGl6ZSB9IGZyb20gXCIuLi9kZWNvcmF0b3Ivc2VyaWFsaXphYmxlLmRlY29yYXRvclwiO1xuaW1wb3J0IHsgaXNCb29sZWFuIH0gZnJvbSBcIi4uL3V0aWxzL2NvcmUudXRpbHNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBEeW5hbWljRm9ybU9wdGlvbkNvbmZpZzxUPiB7XG5cbiAgICBkaXNhYmxlZD86IGJvb2xlYW47XG4gICAgbGFiZWw/OiBzdHJpbmc7XG4gICAgdmFsdWU6IFQ7XG59XG5cbmV4cG9ydCBjbGFzcyBEeW5hbWljRm9ybU9wdGlvbjxUPiB7XG5cbiAgICBAc2VyaWFsaXphYmxlKCkgZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgQHNlcmlhbGl6YWJsZSgpIGxhYmVsOiBzdHJpbmcgfCBudWxsO1xuICAgIEBzZXJpYWxpemFibGUoKSB2YWx1ZTogVDtcblxuICAgIGNvbnN0cnVjdG9yKGNvbmZpZzogRHluYW1pY0Zvcm1PcHRpb25Db25maWc8VD4pIHtcblxuICAgICAgICB0aGlzLmRpc2FibGVkID0gaXNCb29sZWFuKGNvbmZpZy5kaXNhYmxlZCkgPyBjb25maWcuZGlzYWJsZWQgOiBmYWxzZTtcbiAgICAgICAgdGhpcy5sYWJlbCA9IGNvbmZpZy5sYWJlbCA/PyBudWxsO1xuICAgICAgICB0aGlzLnZhbHVlID0gY29uZmlnLnZhbHVlO1xuICAgIH1cblxuICAgIGdldCB0ZXh0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sYWJlbDtcbiAgICB9XG5cbiAgICBzZXQgdGV4dCh0ZXh0OiBzdHJpbmcgfCBudWxsKSB7XG4gICAgICAgIHRoaXMubGFiZWwgPSB0ZXh0O1xuICAgIH1cblxuICAgIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHNlcmlhbGl6ZSh0aGlzKTtcbiAgICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRHluYW1pY09wdGlvbkNvbnRyb2xNb2RlbENvbmZpZzxUPiBleHRlbmRzIER5bmFtaWNGb3JtVmFsdWVDb250cm9sTW9kZWxDb25maWc8VCB8IFRbXT4ge1xuXG4gICAgb3B0aW9ucz86IER5bmFtaWNGb3JtT3B0aW9uQ29uZmlnPFQ+W10gfCBPYnNlcnZhYmxlPER5bmFtaWNGb3JtT3B0aW9uQ29uZmlnPFQ+W10+O1xufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgRHluYW1pY09wdGlvbkNvbnRyb2xNb2RlbDxUPiBleHRlbmRzIER5bmFtaWNGb3JtVmFsdWVDb250cm9sTW9kZWw8VCB8IFRbXT4ge1xuXG4gICAgQHNlcmlhbGl6YWJsZShcIm9wdGlvbnNcIikgcHJpdmF0ZSBfb3B0aW9uczogRHluYW1pY0Zvcm1PcHRpb248VD5bXSA9IFtdO1xuICAgIG9wdGlvbnMkOiBPYnNlcnZhYmxlPER5bmFtaWNGb3JtT3B0aW9uPFQ+W10+O1xuXG4gICAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKGNvbmZpZzogRHluYW1pY09wdGlvbkNvbnRyb2xNb2RlbENvbmZpZzxUPiwgbGF5b3V0PzogRHluYW1pY0Zvcm1Db250cm9sTGF5b3V0KSB7XG5cbiAgICAgICAgc3VwZXIoY29uZmlnLCBsYXlvdXQpO1xuXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IGNvbmZpZy5vcHRpb25zO1xuICAgIH1cblxuICAgIHByaXZhdGUgdXBkYXRlT3B0aW9ucyQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMub3B0aW9ucyQgPSBvZih0aGlzLm9wdGlvbnMpO1xuICAgIH1cblxuICAgIHNldCBvcHRpb25zKG9wdGlvbnM6IGFueSkge1xuXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KG9wdGlvbnMpKSB7XG5cbiAgICAgICAgICAgIHRoaXMuX29wdGlvbnMgPSAob3B0aW9ucyBhcyBEeW5hbWljRm9ybU9wdGlvbkNvbmZpZzxUPltdKS5tYXAob3B0aW9uQ29uZmlnID0+IG5ldyBEeW5hbWljRm9ybU9wdGlvbjxUPihvcHRpb25Db25maWcpKTtcblxuICAgICAgICAgICAgdGhpcy51cGRhdGVPcHRpb25zJCgpO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoaXNPYnNlcnZhYmxlKG9wdGlvbnMpKSB7XG5cbiAgICAgICAgICAgIHRoaXMub3B0aW9ucyQgPSAob3B0aW9ucyBhcyBPYnNlcnZhYmxlPER5bmFtaWNGb3JtT3B0aW9uQ29uZmlnPFQ+W10+KS5waXBlKFxuICAgICAgICAgICAgICAgIG1hcChvcHRpb25zQ29uZmlnID0+IHtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zID0gb3B0aW9uc0NvbmZpZy5tYXAob3B0aW9uQ29uZmlnID0+IG5ldyBEeW5hbWljRm9ybU9wdGlvbjxUPihvcHRpb25Db25maWcpKTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fb3B0aW9ucztcbiAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgfSBlbHNlIHtcblxuICAgICAgICAgICAgdGhpcy51cGRhdGVPcHRpb25zJCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0IG9wdGlvbnMoKTogYW55IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX29wdGlvbnM7XG4gICAgfVxuXG4gICAgYWRkKG9wdGlvbkNvbmZpZzogRHluYW1pY0Zvcm1PcHRpb25Db25maWc8VD4pOiBEeW5hbWljRm9ybU9wdGlvbjxUPiB7XG4gICAgICAgIHJldHVybiB0aGlzLmluc2VydCh0aGlzLm9wdGlvbnMubGVuZ3RoLCBvcHRpb25Db25maWcpO1xuICAgIH1cblxuICAgIGdldChpbmRleDogbnVtYmVyKTogRHluYW1pY0Zvcm1PcHRpb248VD4ge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zW2luZGV4XTtcbiAgICB9XG5cbiAgICBpbnNlcnQoaW5kZXg6IG51bWJlciwgb3B0aW9uQ29uZmlnOiBEeW5hbWljRm9ybU9wdGlvbkNvbmZpZzxUPik6IER5bmFtaWNGb3JtT3B0aW9uPFQ+IHtcblxuICAgICAgICBjb25zdCBvcHRpb24gPSBuZXcgRHluYW1pY0Zvcm1PcHRpb24ob3B0aW9uQ29uZmlnKTtcblxuICAgICAgICB0aGlzLm9wdGlvbnMuc3BsaWNlKGluZGV4LCAwLCBvcHRpb24pO1xuICAgICAgICB0aGlzLnVwZGF0ZU9wdGlvbnMkKCk7XG5cbiAgICAgICAgcmV0dXJuIG9wdGlvbjtcbiAgICB9XG5cbiAgICByZW1vdmUoLi4uaW5kaWNlczogbnVtYmVyW10pOiB2b2lkIHtcblxuICAgICAgICBpbmRpY2VzLmZvckVhY2goaW5kZXggPT4gdGhpcy5vcHRpb25zLnNwbGljZShpbmRleCwgMSkpO1xuICAgICAgICB0aGlzLnVwZGF0ZU9wdGlvbnMkKCk7XG4gICAgfVxuXG4gICAgYWJzdHJhY3Qgc2VsZWN0KC4uLmluZGljZXM6IG51bWJlcltdKTogdm9pZDtcbn1cbiJdfQ==