import { __decorate } from "tslib";
import { Injectable, QueryList } from "@angular/core";
import { DynamicFormArrayGroupModel } from "../model/form-array/dynamic-form-array.model";
import { DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT } from "../directive/dynamic-template.directive";
import { isObject, isString } from "../utils/core.utils";
import * as i0 from "@angular/core";
let DynamicFormLayoutService = class DynamicFormLayoutService {
    findById(id, formLayout) {
        if (isObject(formLayout)) {
            for (const key of Object.keys(formLayout)) {
                if (key === id) {
                    return formLayout[key];
                }
            }
        }
        return null;
    }
    findByModel(model, formLayout) {
        let controlLayout = null;
        if (isObject(formLayout)) {
            for (const key of Object.keys(formLayout)) {
                key.split(",").forEach(substring => {
                    const selector = substring.trim();
                    if (selector === model.id || selector === model.type) {
                        controlLayout = formLayout[key];
                    }
                });
            }
        }
        return controlLayout;
    }
    filterTemplatesByModel(model, templates) {
        const filterCallback = (template) => {
            return template.modelId === model.id || template.modelType === model.type;
        };
        if (templates instanceof QueryList) {
            return templates.filter(filterCallback);
        }
        else if (Array.isArray(templates)) {
            return templates.filter(filterCallback);
        }
        return [];
    }
    getAlignedTemplate(model, templates, alignment) {
        return this.filterTemplatesByModel(model, templates)
            .find(template => template.as === null && template.align === alignment);
    }
    /*
    getIndexedTemplates(model: DynamicFormControlModel, templates: DynamicFormControlTemplates): DynamicTemplateDirective[] | undefined {
        return this.filterTemplatesByModel(model, templates).filter(template => template.as === null);
    }
    */
    getStartTemplate(model, templates) {
        return this.getAlignedTemplate(model, templates, DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT.Start);
    }
    getEndTemplate(model, templates) {
        return this.getAlignedTemplate(model, templates, DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT.End);
    }
    getClass(layout, context, place) {
        if (isObject(layout) && layout.hasOwnProperty(context)) {
            const config = layout[context];
            if (config.hasOwnProperty(place)) {
                return config[place];
            }
        }
        return "";
    }
    getHostClass(layout) {
        const keys = ["element", "grid"];
        let cls = "";
        if (isObject(layout)) {
            keys.forEach(key => {
                if (isObject(layout[key]) && isString(layout[key].host)) {
                    cls = cls + ` ${layout[key].host}`;
                }
            });
        }
        return cls;
    }
    getElementId(model) {
        let id = model.id;
        let parent = model.parent;
        while (parent !== null) {
            if (parent instanceof DynamicFormArrayGroupModel) {
                id = `${parent.context.id}-${parent.index}-${model.id}`;
                break;
            }
            parent = parent.parent;
        }
        return id;
    }
};
DynamicFormLayoutService.ɵprov = i0.ɵɵdefineInjectable({ factory: function DynamicFormLayoutService_Factory() { return new DynamicFormLayoutService(); }, token: DynamicFormLayoutService, providedIn: "root" });
DynamicFormLayoutService = __decorate([
    Injectable({
        providedIn: "root"
    })
], DynamicFormLayoutService);
export { DynamicFormLayoutService };
//# sourceMappingURL=data:application/json;base64,