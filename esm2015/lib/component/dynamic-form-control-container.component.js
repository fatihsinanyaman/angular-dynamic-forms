import { DynamicFormControlEventType, isDynamicFormControlEvent } from "./dynamic-form-control-event";
import { DynamicFormValueControlModel } from "../model/dynamic-form-value-control.model";
import { DYNAMIC_FORM_CONTROL_TYPE_ARRAY, DynamicFormArrayGroupModel } from "../model/form-array/dynamic-form-array.model";
import { DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX } from "../model/checkbox/dynamic-checkbox.model";
import { DYNAMIC_FORM_CONTROL_INPUT_TYPE_FILE, DYNAMIC_FORM_CONTROL_TYPE_INPUT } from "../model/input/dynamic-input.model";
import { isString } from "../utils/core.utils";
import { DynamicFormGroupComponent } from "./dynamic-form-group.component";
import { DynamicFormArrayComponent } from "./dynamic-form-array.component";
export class DynamicFormControlContainerComponent {
    constructor(changeDetectorRef, componentFactoryResolver, layoutService, validationService, componentService, relationService) {
        this.changeDetectorRef = changeDetectorRef;
        this.componentFactoryResolver = componentFactoryResolver;
        this.layoutService = layoutService;
        this.validationService = validationService;
        this.componentService = componentService;
        this.relationService = relationService;
        this._hasFocus = false;
        this.context = null;
        this.componentSubscriptions = [];
        this.subscriptions = [];
    }
    ngOnChanges(changes) {
        const groupChange = changes.group;
        const layoutChange = changes.layout;
        const modelChange = changes.model;
        if (layoutChange || modelChange) {
            this.onLayoutOrModelChange();
        }
        if (modelChange) {
            this.onModelChange();
        }
        if (groupChange || modelChange) {
            this.onGroupOrModelChange();
        }
    }
    ngOnDestroy() {
        this.destroyFormControlComponent();
        this.unsubscribe();
    }
    get id() {
        return this.layoutService.getElementId(this.model);
    }
    get hasFocus() {
        return this._hasFocus;
    }
    get isInvalid() {
        return this.control.invalid;
    }
    get isValid() {
        return this.control.valid;
    }
    get errorMessages() {
        return this.validationService.createErrorMessages(this.control, this.model);
    }
    get showErrorMessages() {
        return this.validationService.showErrorMessages(this.control, this.model, this.hasFocus);
    }
    get hasLabel() {
        return isString(this.model.label);
    }
    get hasHint() {
        return isString(this.model.hint);
    }
    get hint() {
        var _a;
        return (_a = this.model.hint) !== null && _a !== void 0 ? _a : null;
    }
    get isCheckbox() {
        return this.model.type === DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX;
    }
    get templates() {
        return this.inputTemplateList !== undefined ? this.inputTemplateList : this.contentTemplateList;
    }
    get startTemplate() {
        return this.model.type !== DYNAMIC_FORM_CONTROL_TYPE_ARRAY ?
            this.layoutService.getStartTemplate(this.model, this.templates) : undefined;
    }
    get endTemplate() {
        return this.model.type !== DYNAMIC_FORM_CONTROL_TYPE_ARRAY ?
            this.layoutService.getEndTemplate(this.model, this.templates) : undefined;
    }
    getClass(context, place) {
        return this.layoutService.getClass(this.controlLayout, context, place);
    }
    markForCheck() {
        this.changeDetectorRef.markForCheck();
        const component = this.componentRef && this.componentRef.instance;
        if (component && (component instanceof DynamicFormGroupComponent || component instanceof DynamicFormArrayComponent)) {
            component.markForCheck();
        }
    }
    createFormControlComponent() {
        const componentType = this.componentType;
        if (componentType !== null) {
            const componentFactory = this.componentFactoryResolver.resolveComponentFactory(componentType);
            this.componentViewContainerRef.clear();
            this.componentRef = this.componentViewContainerRef.createComponent(componentFactory);
            const component = this.componentRef.instance;
            component.formLayout = this.layout;
            component.group = this.group;
            component.layout = this.controlLayout;
            component.model = this.model;
            if (this.templates) {
                component.templates = this.templates;
            }
            this.componentSubscriptions.push(component.blur.subscribe(($event) => this.onBlur($event)));
            this.componentSubscriptions.push(component.change.subscribe(($event) => this.onChange($event)));
            this.componentSubscriptions.push(component.focus.subscribe(($event) => this.onFocus($event)));
            if (component.customEvent !== undefined) {
                this.componentSubscriptions.push(component.customEvent.subscribe(($event) => this.onCustomEvent($event)));
            }
            this.registerFormControlComponentRef(this.componentRef);
        }
    }
    destroyFormControlComponent() {
        if (this.componentRef) {
            this.componentSubscriptions.forEach(subscription => subscription.unsubscribe());
            this.componentSubscriptions = [];
            this.unregisterFormControlComponentRef();
            this.componentRef.destroy();
        }
    }
    createDynamicFormControlEvent($event, type) {
        return { $event, context: this.context, control: this.control, group: this.group, model: this.model, type };
    }
    unsubscribe() {
        // this.componentSubscriptions.forEach(subscription => subscription.unsubscribe());
        // this.componentSubscriptions = [];
        this.subscriptions.forEach(subscription => subscription.unsubscribe());
        this.subscriptions = [];
    }
    onControlValueChanges(value) {
        if (this.model instanceof DynamicFormValueControlModel && this.model.value !== value) {
            this.model.value = value;
        }
    }
    onModelValueUpdates(value) {
        if (this.control.value !== value) {
            this.control.setValue(value);
        }
    }
    onModelDisabledUpdates(disabled) {
        disabled ? this.control.disable() : this.control.enable();
    }
    onLayoutOrModelChange() {
        var _a;
        this.controlLayout = (_a = this.layoutService.findByModel(this.model, this.layout)) !== null && _a !== void 0 ? _a : this.model.layout;
        this.klass = `${Array.isArray(this.hostClass) ? this.hostClass.join(" ") : ""} ${this.layoutService.getHostClass(this.controlLayout)}`;
    }
    onModelChange() {
        this.destroyFormControlComponent();
        this.createFormControlComponent();
    }
    onGroupOrModelChange() {
        if (this.model) {
            this.unsubscribe();
            if (this.group) {
                this.control = this.group.get(this.model.id);
                this.subscriptions.push(this.control.valueChanges.subscribe(value => this.onControlValueChanges(value)));
            }
            this.subscriptions.push(this.model.disabledChanges.subscribe(value => this.onModelDisabledUpdates(value)));
            if (this.model instanceof DynamicFormValueControlModel) {
                const model = this.model;
                this.subscriptions.push(model.valueChanges.subscribe(value => this.onModelValueUpdates(value)));
            }
            if (this.model.relations.length > 0) {
                this.subscriptions.push(...this.relationService.subscribeRelations(this.model, this.group, this.control));
            }
        }
    }
    onChange($event) {
        var _a;
        if ($event instanceof Event) { // native HTML5 change event
            if (this.model.type === DYNAMIC_FORM_CONTROL_TYPE_INPUT) {
                const model = this.model;
                if (model.inputType === DYNAMIC_FORM_CONTROL_INPUT_TYPE_FILE) {
                    const inputElement = (_a = $event.target) !== null && _a !== void 0 ? _a : $event.srcElement;
                    model.files = inputElement.files;
                }
            }
            this.change.emit(this.createDynamicFormControlEvent($event, DynamicFormControlEventType.Change));
        }
        else if (isDynamicFormControlEvent($event)) { // event bypass
            this.change.emit($event);
        }
        else { // custom library value change event
            this.change.emit(this.createDynamicFormControlEvent($event, DynamicFormControlEventType.Change));
        }
    }
    onBlur($event) {
        if (isDynamicFormControlEvent($event)) { // event bypass
            this.blur.emit($event);
        }
        else { // native HTML 5 or UI library blur event
            this._hasFocus = false;
            this.blur.emit(this.createDynamicFormControlEvent($event, DynamicFormControlEventType.Blur));
        }
    }
    onFocus($event) {
        if (isDynamicFormControlEvent($event)) { // event bypass
            this.focus.emit($event);
        }
        else { // native HTML 5 or UI library focus event
            this._hasFocus = true;
            this.focus.emit(this.createDynamicFormControlEvent($event, DynamicFormControlEventType.Focus));
        }
    }
    onCustomEvent($event) {
        const emitter = this.customEvent;
        if (isDynamicFormControlEvent($event)) { // child event bypass
            emitter.emit($event);
        }
        else { // native UI library custom event
            emitter.emit(this.createDynamicFormControlEvent($event.customEvent, $event.customEventType));
        }
    }
    registerFormControlComponentRef(ref) {
        if (this.context instanceof DynamicFormArrayGroupModel) {
            this.componentService.registerFormControl(this.model, ref, this.context.index);
        }
        else {
            this.componentService.registerFormControl(this.model, ref);
        }
    }
    unregisterFormControlComponentRef() {
        if (this.context instanceof DynamicFormArrayGroupModel) {
            this.componentService.unregisterFormControl(this.model.id, this.context.index);
        }
        else {
            this.componentService.unregisterFormControl(this.model.id);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,