import { __decorate, __extends, __metadata } from "tslib";
import { DynamicInputControlModel } from "../dynamic-input-control.model";
import { serializable } from "../../decorator/serializable.decorator";
import { maskToString } from "../../utils/json.utils";
import { isBoolean, isFunction, isNumber } from "../../utils/core.utils";
import { isObservable, of } from "rxjs";
import { tap } from "rxjs/operators";
export var DYNAMIC_FORM_CONTROL_TYPE_INPUT = "INPUT";
export var DYNAMIC_FORM_CONTROL_INPUT_TYPE_COLOR = "color";
export var DYNAMIC_FORM_CONTROL_INPUT_TYPE_DATE = "date";
//export const DYNAMIC_FORM_CONTROL_INPUT_TYPE_DATETIME = "datetime";
export var DYNAMIC_FORM_CONTROL_INPUT_TYPE_DATETIME_LOCAL = "datetime-local";
export var DYNAMIC_FORM_CONTROL_INPUT_TYPE_EMAIL = "email";
export var DYNAMIC_FORM_CONTROL_INPUT_TYPE_FILE = "file";
export var DYNAMIC_FORM_CONTROL_INPUT_TYPE_MONTH = "month";
export var DYNAMIC_FORM_CONTROL_INPUT_TYPE_NUMBER = "number";
export var DYNAMIC_FORM_CONTROL_INPUT_TYPE_PASSWORD = "password";
export var DYNAMIC_FORM_CONTROL_INPUT_TYPE_RANGE = "range";
export var DYNAMIC_FORM_CONTROL_INPUT_TYPE_SEARCH = "search";
export var DYNAMIC_FORM_CONTROL_INPUT_TYPE_TEL = "tel";
export var DYNAMIC_FORM_CONTROL_INPUT_TYPE_TEXT = "text";
export var DYNAMIC_FORM_CONTROL_INPUT_TYPE_TIME = "time";
export var DYNAMIC_FORM_CONTROL_INPUT_TYPE_URL = "url";
export var DYNAMIC_FORM_CONTROL_INPUT_TYPE_WEEK = "week";
var DynamicInputModel = /** @class */ (function (_super) {
    __extends(DynamicInputModel, _super);
    function DynamicInputModel(config, layout) {
        var _a, _b, _c, _d;
        var _this = _super.call(this, config, layout) || this;
        _this.files = null;
        _this.list$ = null;
        _this._list = null;
        _this._listId = null;
        _this.type = DYNAMIC_FORM_CONTROL_TYPE_INPUT;
        _this.accept = (_a = config.accept) !== null && _a !== void 0 ? _a : null;
        _this.inputType = (_b = config.inputType) !== null && _b !== void 0 ? _b : DYNAMIC_FORM_CONTROL_INPUT_TYPE_TEXT;
        _this.mask = (_c = config.mask) !== null && _c !== void 0 ? _c : null;
        _this.max = config.max !== undefined ? config.max : null;
        _this.min = config.min !== undefined ? config.min : null;
        _this.multiple = isBoolean(config.multiple) ? config.multiple : null;
        _this.pattern = (_d = config.pattern) !== null && _d !== void 0 ? _d : null;
        _this.step = isNumber(config.step) ? config.step : null;
        if (config.list !== undefined) {
            _this.list = config.list;
            _this._listId = _this.id + "List";
        }
        return _this;
    }
    Object.defineProperty(DynamicInputModel.prototype, "listId", {
        get: function () {
            return this._listId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicInputModel.prototype, "hasList", {
        get: function () {
            return isObservable(this.list$);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DynamicInputModel.prototype, "list", {
        set: function (list) {
            var _this = this;
            if (Array.isArray(list)) {
                this._list = list;
                this.list$ = of(this._list);
            }
            else if (isObservable(list)) {
                this.list$ = list.pipe(tap(function (list) { return _this._list = list; }));
            }
            else {
                this._list = null;
                this.list$ = null;
            }
        },
        enumerable: true,
        configurable: true
    });
    DynamicInputModel.prototype.toJSON = function () {
        var json = _super.prototype.toJSON.call(this);
        if (this.mask !== null) {
            json.mask = isFunction(this.mask) ? this.mask : maskToString(this.mask);
        }
        return json;
    };
    __decorate([
        serializable(),
        __metadata("design:type", String)
    ], DynamicInputModel.prototype, "accept", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", String)
    ], DynamicInputModel.prototype, "inputType", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", Object)
    ], DynamicInputModel.prototype, "mask", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", Object)
    ], DynamicInputModel.prototype, "max", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", Object)
    ], DynamicInputModel.prototype, "min", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", Boolean)
    ], DynamicInputModel.prototype, "multiple", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", String)
    ], DynamicInputModel.prototype, "pattern", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", Number)
    ], DynamicInputModel.prototype, "step", void 0);
    __decorate([
        serializable("list"),
        __metadata("design:type", Array)
    ], DynamicInputModel.prototype, "_list", void 0);
    __decorate([
        serializable(),
        __metadata("design:type", String)
    ], DynamicInputModel.prototype, "type", void 0);
    return DynamicInputModel;
}(DynamicInputControlModel));
export { DynamicInputModel };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1pbnB1dC5tb2RlbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZy1keW5hbWljLWZvcm1zL2NvcmUvIiwic291cmNlcyI6WyJsaWIvbW9kZWwvaW5wdXQvZHluYW1pYy1pbnB1dC5tb2RlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLHdCQUF3QixFQUFrQyxNQUFNLGdDQUFnQyxDQUFDO0FBRTFHLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUN0RSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDdEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDekUsT0FBTyxFQUFjLFlBQVksRUFBRSxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDcEQsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXJDLE1BQU0sQ0FBQyxJQUFNLCtCQUErQixHQUFHLE9BQU8sQ0FBQztBQUV2RCxNQUFNLENBQUMsSUFBTSxxQ0FBcUMsR0FBRyxPQUFPLENBQUM7QUFDN0QsTUFBTSxDQUFDLElBQU0sb0NBQW9DLEdBQUcsTUFBTSxDQUFDO0FBQzNELHFFQUFxRTtBQUNyRSxNQUFNLENBQUMsSUFBTSw4Q0FBOEMsR0FBRyxnQkFBZ0IsQ0FBQztBQUMvRSxNQUFNLENBQUMsSUFBTSxxQ0FBcUMsR0FBRyxPQUFPLENBQUM7QUFDN0QsTUFBTSxDQUFDLElBQU0sb0NBQW9DLEdBQUcsTUFBTSxDQUFDO0FBQzNELE1BQU0sQ0FBQyxJQUFNLHFDQUFxQyxHQUFHLE9BQU8sQ0FBQztBQUM3RCxNQUFNLENBQUMsSUFBTSxzQ0FBc0MsR0FBRyxRQUFRLENBQUM7QUFDL0QsTUFBTSxDQUFDLElBQU0sd0NBQXdDLEdBQUcsVUFBVSxDQUFDO0FBQ25FLE1BQU0sQ0FBQyxJQUFNLHFDQUFxQyxHQUFHLE9BQU8sQ0FBQztB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Q0FBaUIsQ0FBQyxDQUFDLENBQUM7YUFFMUQ7aUJBQU07Z0JBRUgsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7Z0JBQ2xCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO2FBQ3JCO1FBQ0wsQ0FBQzs7O09BQUE7SUFFRCxrQ0FBTSxHQUFOO1FBRUksSUFBTSxJQUFJLEdBQVEsaUJBQU0sTUFBTSxXQUFFLENBQUM7UUFFakMsSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLElBQUksRUFBRTtZQUNwQixJQUFJLENBQUMsSUFBSSxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDM0U7UUFFRCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBdkVlO1FBQWYsWUFBWSxFQUFFOztxREFBdUI7SUFDdEI7UUFBZixZQUFZLEVBQUU7O3dEQUFtQjtJQUdsQjtRQUFmLFlBQVksRUFBRTs7bURBQStEO0lBQzlEO1FBQWYsWUFBWSxFQUFFOztrREFBb0M7SUFDbkM7UUFBZixZQUFZLEVBQUU7O2tEQUFvQztJQUNuQztRQUFmLFlBQVksRUFBRTs7dURBQTBCO0lBQ3pCO1FBQWYsWUFBWSxFQUFFOztzREFBd0I7SUFDdkI7UUFBZixZQUFZLEVBQUU7O21EQUFxQjtJQUVkO1FBQXJCLFlBQVksQ0FBQyxNQUFNLENBQUM7O29EQUFvQztJQUd6QztRQUFmLFlBQVksRUFBRTs7bURBQXlEO0lBMEQ1RSx3QkFBQztDQUFBLEFBMUVELENBQXVDLHdCQUF3QixHQTBFOUQ7U0ExRVksaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRHluYW1pY0lucHV0Q29udHJvbE1vZGVsLCBEeW5hbWljSW5wdXRDb250cm9sTW9kZWxDb25maWcgfSBmcm9tIFwiLi4vZHluYW1pYy1pbnB1dC1jb250cm9sLm1vZGVsXCI7XG5pbXBvcnQgeyBEeW5hbWljRm9ybUNvbnRyb2xMYXlvdXQgfSBmcm9tIFwiLi4vbWlzYy9keW5hbWljLWZvcm0tY29udHJvbC1sYXlvdXQubW9kZWxcIjtcbmltcG9ydCB7IHNlcmlhbGl6YWJsZSB9IGZyb20gXCIuLi8uLi9kZWNvcmF0b3Ivc2VyaWFsaXphYmxlLmRlY29yYXRvclwiO1xuaW1wb3J0IHsgbWFza1RvU3RyaW5nIH0gZnJvbSBcIi4uLy4uL3V0aWxzL2pzb24udXRpbHNcIjtcbmltcG9ydCB7IGlzQm9vbGVhbiwgaXNGdW5jdGlvbiwgaXNOdW1iZXIgfSBmcm9tIFwiLi4vLi4vdXRpbHMvY29yZS51dGlsc1wiO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgaXNPYnNlcnZhYmxlLCBvZiB9IGZyb20gXCJyeGpzXCI7XG5pbXBvcnQgeyB0YXAgfSBmcm9tIFwicnhqcy9vcGVyYXRvcnNcIjtcblxuZXhwb3J0IGNvbnN0IERZTkFNSUNfRk9STV9DT05UUk9MX1RZUEVfSU5QVVQgPSBcIklOUFVUXCI7XG5cbmV4cG9ydCBjb25zdCBEWU5BTUlDX0ZPUk1fQ09OVFJPTF9JTlBVVF9UWVBFX0NPTE9SID0gXCJjb2xvclwiO1xuZXhwb3J0IGNvbnN0IERZTkFNSUNfRk9STV9DT05UUk9MX0lOUFVUX1RZUEVfREFURSA9IFwiZGF0ZVwiO1xuLy9leHBvcnQgY29uc3QgRFlOQU1JQ19GT1JNX0NPTlRST0xfSU5QVVRfVFlQRV9EQVRFVElNRSA9IFwiZGF0ZXRpbWVcIjtcbmV4cG9ydCBjb25zdCBEWU5BTUlDX0ZPUk1fQ09OVFJPTF9JTlBVVF9UWVBFX0RBVEVUSU1FX0xPQ0FMID0gXCJkYXRldGltZS1sb2NhbFwiO1xuZXhwb3J0IGNvbnN0IERZTkFNSUNfRk9STV9DT05UUk9MX0lOUFVUX1RZUEVfRU1BSUwgPSBcImVtYWlsXCI7XG5leHBvcnQgY29uc3QgRFlOQU1JQ19GT1JNX0NPTlRST0xfSU5QVVRfVFlQRV9GSUxFID0gXCJmaWxlXCI7XG5leHBvcnQgY29uc3QgRFlOQU1JQ19GT1JNX0NPTlRST0xfSU5QVVRfVFlQRV9NT05USCA9IFwibW9udGhcIjtcbmV4cG9ydCBjb25zdCBEWU5BTUlDX0ZPUk1fQ09OVFJPTF9JTlBVVF9UWVBFX05VTUJFUiA9IFwibnVtYmVyXCI7XG5leHBvcnQgY29uc3QgRFlOQU1JQ19GT1JNX0NPTlRST0xfSU5QVVRfVFlQRV9QQVNTV09SRCA9IFwicGFzc3dvcmRcIjtcbmV4cG9ydCBjb25zdCBEWU5BTUlDX0ZPUk1fQ09OVFJPTF9JTlBVVF9UWVBFX1JBTkdFID0gXCJyYW5nZVwiO1xuZXhwb3J0IGNvbnN0IERZTkFNSUNfRk9STV9DT05UUk9MX0lOUFVUX1RZUEVfU0VBUkNIID0gXCJzZWFyY2hcIjtcbmV4cG9ydCBjb25zdCBEWU5BTUlDX0ZPUk1fQ09OVFJPTF9JTlBVVF9UWVBFX1RFTCA9IFwidGVsXCI7XG5leHBvcnQgY29uc3QgRFlOQU1JQ19GT1JNX0NPTlRST0xfSU5QVVRfVFlQRV9URVhUID0gXCJ0ZXh0XCI7XG5leHBvcnQgY29uc3QgRFlOQU1JQ19GT1JNX0NPTlRST0xfSU5QVVRfVFlQRV9USU1FID0gXCJ0aW1lXCI7XG5leHBvcnQgY29uc3QgRFlOQU1JQ19GT1JNX0NPTlRST0xfSU5QVVRfVFlQRV9VUkwgPSBcInVybFwiO1xuZXhwb3J0IGNvbnN0IERZTkFNSUNfRk9STV9DT05UUk9MX0lOUFVUX1RZUEVfV0VFSyA9IFwid2Vla1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIER5bmFtaWNJbnB1dE1vZGVsQ29uZmlnIGV4dGVuZHMgRHluYW1pY0lucHV0Q29udHJvbE1vZGVsQ29uZmlnPHN0cmluZyB8IG51bWJlciB8IERhdGUgfCBzdHJpbmdbXT4ge1xuXG4gICAgYWNjZXB0Pzogc3RyaW5nO1xuICAgIGlucHV0VHlwZT86IHN0cmluZztcbiAgICBsaXN0PzogYW55W10gfCBPYnNlcnZhYmxlPGFueVtdPjtcbiAgICBtYXNrPzogc3RyaW5nIHwgUmVnRXhwIHwgRnVuY3Rpb24gfCAoc3RyaW5nIHwgUmVnRXhwKVtdO1xuICAgIG1heD86IG51bWJlciB8IHN0cmluZyB8IERhdGU7XG4gICAgbWluPzogbnVtYmVyIHwgc3RyaW5nIHwgRGF0ZTtcbiAgICBtdWx0aXBsZT86IGJvb2xlYW47XG4gICAgcGF0dGVybj86IHN0cmluZztcbiAgICBzdGVwPzogbnVtYmVyO1xufVxuXG5leHBvcnQgY2xhc3MgRHluYW1pY0lucHV0TW9kZWwgZXh0ZW5kcyBEeW5hbWljSW5wdXRDb250cm9sTW9kZWw8c3RyaW5nIHwgbnVtYmVyIHwgRGF0ZSB8IHN0cmluZ1tdPiB7XG5cbiAgICBAc2VyaWFsaXphYmxlKCkgYWNjZXB0OiBzdHJpbmcgfCBudWxsO1xuICAgIEBzZXJpYWxpemFibGUoKSBpbnB1dFR5cGU6IHN0cmluZztcbiAgICBmaWxlczogRmlsZUxpc3QgfCBudWxsID0gbnVsbDtcbiAgICBsaXN0JDogT2JzZXJ2YWJsZTxhbnlbXT4gfCBudWxsID0gbnVsbDtcbiAgICBAc2VyaWFsaXphYmxlKCkgbWFzazogc3RyaW5nIHwgUmVnRXhwIHwgRnVuY3Rpb24gfCAoc3RyaW5nIHwgUmVnRXhwKVtdIHwgbnVsbDtcbiAgICBAc2VyaWFsaXphYmxlKCkgbWF4OiBudW1iZXIgfCBzdHJpbmcgfCBEYXRlIHwgbnVsbDtcbiAgICBAc2VyaWFsaXphYmxlKCkgbWluOiBudW1iZXIgfCBzdHJpbmcgfCBEYXRlIHwgbnVsbDtcbiAgICBAc2VyaWFsaXphYmxlKCkgbXVsdGlwbGU6IGJvb2xlYW4gfCBudWxsO1xuICAgIEBzZXJpYWxpemFibGUoKSBwYXR0ZXJuOiBzdHJpbmcgfCBudWxsO1xuICAgIEBzZXJpYWxpemFibGUoKSBzdGVwOiBudW1iZXIgfCBudWxsO1xuXG4gICAgQHNlcmlhbGl6YWJsZShcImxpc3RcIikgcHJpdmF0ZSBfbGlzdDogYW55W10gfCBudWxsID0gbnVsbDtcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9saXN0SWQ6IHN0cmluZyB8IG51bGwgPSBudWxsO1xuXG4gICAgQHNlcmlhbGl6YWJsZSgpIHJlYWRvbmx5IHR5cGU6IHN0cmluZyA9IERZTkFNSUNfRk9STV9DT05UUk9MX1RZUEVfSU5QVVQ7XG5cbiAgICBjb25zdHJ1Y3Rvcihjb25maWc6IER5bmFtaWNJbnB1dE1vZGVsQ29uZmlnLCBsYXlvdXQ/OiBEeW5hbWljRm9ybUNvbnRyb2xMYXlvdXQpIHtcblxuICAgICAgICBzdXBlcihjb25maWcsIGxheW91dCk7XG5cbiAgICAgICAgdGhpcy5hY2NlcHQgPSBjb25maWcuYWNjZXB0ID8/IG51bGw7XG4gICAgICAgIHRoaXMuaW5wdXRUeXBlID0gY29uZmlnLmlucHV0VHlwZSA/PyBEWU5BTUlDX0ZPUk1fQ09OVFJPTF9JTlBVVF9UWVBFX1RFWFQ7XG4gICAgICAgIHRoaXMubWFzayA9IGNvbmZpZy5tYXNrID8/IG51bGw7XG4gICAgICAgIHRoaXMubWF4ID0gY29uZmlnLm1heCAhPT0gdW5kZWZpbmVkID8gY29uZmlnLm1heCA6IG51bGw7XG4gICAgICAgIHRoaXMubWluID0gY29uZmlnLm1pbiAhPT0gdW5kZWZpbmVkID8gY29uZmlnLm1pbiA6IG51bGw7XG4gICAgICAgIHRoaXMubXVsdGlwbGUgPSBpc0Jvb2xlYW4oY29uZmlnLm11bHRpcGxlKSA/IGNvbmZpZy5tdWx0aXBsZSA6IG51bGw7XG4gICAgICAgIHRoaXMucGF0dGVybiA9IGNvbmZpZy5wYXR0ZXJuID8/IG51bGw7XG4gICAgICAgIHRoaXMuc3RlcCA9IGlzTnVtYmVyKGNvbmZpZy5zdGVwKSA/IGNvbmZpZy5zdGVwIDogbnVsbDtcblxuICAgICAgICBpZiAoY29uZmlnLmxpc3QgIT09IHVuZGVmaW5lZCkge1xuXG4gICAgICAgICAgICB0aGlzLmxpc3QgPSBjb25maWcubGlzdDtcbiAgICAgICAgICAgIHRoaXMuX2xpc3RJZCA9IGAke3RoaXMuaWR9TGlzdGA7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQgbGlzdElkKCk6IHN0cmluZyB8IG51bGwge1xuICAgICAgICByZXR1cm4gdGhpcy5fbGlzdElkO1xuICAgIH1cblxuICAgIGdldCBoYXNMaXN0KCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gaXNPYnNlcnZhYmxlKHRoaXMubGlzdCQpO1xuICAgIH1cblxuICAgIHNldCBsaXN0KGxpc3Q6IGFueVtdIHwgT2JzZXJ2YWJsZTxhbnlbXT4gfCBudWxsKSB7XG5cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobGlzdCkpIHtcblxuICAgICAgICAgICAgdGhpcy5fbGlzdCA9IGxpc3Q7XG4gICAgICAgICAgICB0aGlzLmxpc3QkID0gb2YodGhpcy5fbGlzdCk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChpc09ic2VydmFibGUobGlzdCkpIHtcblxuICAgICAgICAgICAgdGhpcy5saXN0JCA9IGxpc3QucGlwZSh0YXAobGlzdCA9PiB0aGlzLl9saXN0ID0gbGlzdCkpO1xuXG4gICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgIHRoaXMuX2xpc3QgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5saXN0JCA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0b0pTT04oKSB7XG5cbiAgICAgICAgY29uc3QganNvbjogYW55ID0gc3VwZXIudG9KU09OKCk7XG5cbiAgICAgICAgaWYgKHRoaXMubWFzayAhPT0gbnVsbCkge1xuICAgICAgICAgICAganNvbi5tYXNrID0gaXNGdW5jdGlvbih0aGlzLm1hc2spID8gdGhpcy5tYXNrIDogbWFza1RvU3RyaW5nKHRoaXMubWFzayk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ganNvbjtcbiAgICB9XG59XG4iXX0=