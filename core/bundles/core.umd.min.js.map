{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@ng-dynamic-forms/core/lib/utils/core.utils.ts","ng://@ng-dynamic-forms/core/lib/component/dynamic-form-control-event.ts","ng://@ng-dynamic-forms/core/lib/model/misc/dynamic-form-control-validation.model.ts","ng://@ng-dynamic-forms/core/lib/component/dynamic-form-control.component.ts","ng://@ng-dynamic-forms/core/lib/component/dynamic-form-array.component.ts","ng://@ng-dynamic-forms/core/lib/component/dynamic-form-group.component.ts","ng://@ng-dynamic-forms/core/lib/component/dynamic-form.component.ts","ng://@ng-dynamic-forms/core/lib/decorator/serializable.decorator.ts","ng://@ng-dynamic-forms/core/lib/model/dynamic-form-control.model.ts","ng://@ng-dynamic-forms/core/lib/model/dynamic-form-value-control.model.ts","ng://@ng-dynamic-forms/core/lib/model/form-array/dynamic-form-array.model.ts","ng://@ng-dynamic-forms/core/lib/model/dynamic-check-control.model.ts","ng://@ng-dynamic-forms/core/lib/model/checkbox/dynamic-checkbox.model.ts","ng://@ng-dynamic-forms/core/lib/model/dynamic-input-control.model.ts","ng://@ng-dynamic-forms/core/lib/utils/json.utils.ts","ng://@ng-dynamic-forms/core/lib/directive/dynamic-template.directive.ts","ng://@ng-dynamic-forms/core/lib/model/input/dynamic-input.model.ts","ng://@ng-dynamic-forms/core/lib/component/dynamic-form-control-container.component.ts","ng://@ng-dynamic-forms/core/lib/component/dynamic-form-control-with-template.component.ts","ng://@ng-dynamic-forms/core/lib/directive/dynamic-list.directive.ts","ng://@ng-dynamic-forms/core/lib/model/dynamic-date-control.model.ts","ng://@ng-dynamic-forms/core/lib/model/dynamic-file-control.model.ts","ng://@ng-dynamic-forms/core/lib/model/dynamic-option-control.model.ts","ng://@ng-dynamic-forms/core/lib/model/form-group/dynamic-form-group.model.ts","ng://@ng-dynamic-forms/core/lib/model/checkbox/dynamic-checkbox-group.model.ts","ng://@ng-dynamic-forms/core/lib/model/colorpicker/dynamic-colorpicker.model.ts","ng://@ng-dynamic-forms/core/lib/model/datepicker/dynamic-datepicker.model.ts","ng://@ng-dynamic-forms/core/lib/model/editor/dynamic-editor.model.ts","ng://@ng-dynamic-forms/core/lib/model/file-upload/dynamic-file-upload.model.ts","ng://@ng-dynamic-forms/core/lib/model/radio/dynamic-radio-group.model.ts","ng://@ng-dynamic-forms/core/lib/model/rating/dynamic-rating.model.ts","ng://@ng-dynamic-forms/core/lib/model/select/dynamic-select.model.ts","ng://@ng-dynamic-forms/core/lib/model/slider/dynamic-slider.model.ts","ng://@ng-dynamic-forms/core/lib/model/switch/dynamic-switch.model.ts","ng://@ng-dynamic-forms/core/lib/model/textarea/dynamic-textarea.model.ts","ng://@ng-dynamic-forms/core/lib/model/timepicker/dynamic-timepicker.model.ts","ng://@ng-dynamic-forms/core/lib/service/dynamic-form-validators.ts","ng://@ng-dynamic-forms/core/lib/service/dynamic-form-validation-matchers.ts","ng://@ng-dynamic-forms/core/lib/service/dynamic-form-validation.service.ts","ng://@ng-dynamic-forms/core/lib/service/dynamic-form-component.service.ts","ng://@ng-dynamic-forms/core/lib/service/dynamic-form.service.ts","ng://@ng-dynamic-forms/core/lib/service/dynamic-form-relation-matchers.ts","ng://@ng-dynamic-forms/core/lib/service/dynamic-form-layout.service.ts","ng://@ng-dynamic-forms/core/lib/service/dynamic-form-relation.service.ts","ng://@ng-dynamic-forms/core/lib/utils/autofill.utils.ts","ng://@ng-dynamic-forms/core/lib/core.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","__values","o","m","Symbol","iterator","next","value","done","__read","e","ar","push","error","__spread","concat","isBoolean","isFunction","isNumber","isObject","isString","DynamicFormControlEventType","DynamicFormHook","DynamicFormControlComponent","layoutService","validationService","_hasFocus","control","group","get","model","id","Error","getElementId","invalid","valid","createErrorMessages","showErrorMessages","hasFocus","getClass","context","place","controlLayout","layout","_a","findByModel","formLayout","onBlur","$event","Event","stopPropagation","blur","emit","onChange","change","onCustomEvent","type","bypass","customEvent","customEventType","onFocus","focus","DynamicFormArrayComponent","_super","getStartTemplate","templates","getEndTemplate","markForCheck","components","QueryList","forEach","component","DynamicFormGroupComponent","DynamicFormComponent","changeDetectorRef","componentService","ngOnInit","registerForm","ngOnDestroy","unregisterForm","trackByFn","_index","detectChanges","customEventEmitter","isDynamicFormControlEvent","serializable","name","defineMetadata","getSerializables","serializables","getMetadata","serialize","reduce","prev","prop","DynamicFormControlModel","config","_this","parent","asyncValidators","errorMessages","_b","hidden","label","_c","labelTooltip","_d","controlTooltip","_e","_f","relations","isArray","updateOn","validators","_g","disabled$","BehaviorSubject","disabled","subscribe","_disabled","disabledChanges","asObservable","getValue","toJSON","DynamicFormValueControlModel","additional","hint","required","tabIndex","value$","_value","valueChanges","getAdditional","defaultValue","DynamicFormArrayGroupModel","index","$implicit","DynamicFormArrayModel","groups","groupFactory","groupAsyncValidators","groupPrototype","groupValidators","initialCount","arrayGroup","addGroup","updateGroupIndex","insertGroup","splice","moveGroup","step","removeGroup","clear","DynamicCheckControlModel","labelPosition","checked","toggle","DynamicCheckboxModel","indeterminate","DynamicInputControlModel","autoComplete","autoFocus","maxLength","minLength","placeholder","prefix","readOnly","spellCheck","suffix","maskToString","mask","RegExp","toString","map","maskFromString","startsWith","endsWith","slice","parseReviver","_key","test","Date","DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT","DynamicInputModel","files","list$","_list","_listId","accept","inputType","max","undefined","min","multiple","pattern","list","isObservable","of","pipe","tap","json","DynamicFormControlContainerComponent","componentFactoryResolver","relationService","componentSubscriptions","subscriptions","ngOnChanges","changes","groupChange","layoutChange","modelChange","onLayoutOrModelChange","onModelChange","onGroupOrModelChange","destroyFormControlComponent","unsubscribe","inputTemplateList","contentTemplateList","componentRef","instance","createFormControlComponent","componentType","componentFactory","resolveComponentFactory","componentViewContainerRef","createComponent","registerFormControlComponentRef","subscription","unregisterFormControlComponentRef","destroy","createDynamicFormControlEvent","onControlValueChanges","onModelValueUpdates","setValue","onModelDisabledUpdates","disable","enable","klass","hostClass","join","getHostClass","subscribeRelations","inputElement","srcElement","Change","Blur","Focus","emitter","ref","registerFormControl","unregisterFormControl","DynamicFormControlWithTemplateComponent","ngAfterViewInit","filterTemplatesByModel","template","bindTemplate","as","templateDirectives","has","property","viewChild","mapTemplate","DynamicListDirective","elementRef","renderer","listId","setAttribute","nativeElement","ElementRef","Renderer2","Input","Directive","selector","DynamicTemplateDirective","templateRef","align","End","TemplateRef","DynamicDateControlModel","format","DynamicFileControlModel","DynamicFormOption","text","DynamicOptionControlModel","_options","options","updateOptions$","options$","optionConfig","optionsConfig","add","insert","option","remove","indices","_i","DynamicFormGroupModel","legend","set","controlModel","move","size","DynamicCheckboxGroupModel","check","uncheck","checkAll","uncheckAll","DynamicColorPickerModel","inline","DynamicDatePickerModel","focusedDate","toggleIcon","toggleLabel","DynamicEditorModel","DynamicFileUploadModel","autoUpload","maxSize","minSize","removeUrl","showFileList","url","DynamicRadioGroupModel","select","DynamicRatingModel","DynamicSelectModel","compareWithFn","looseIdentical","filterable","DynamicSliderModel","vertical","DynamicSwitchModel","offLabel","onLabel","DynamicTextAreaModel","cols","rows","wrap","DynamicTimePickerModel","meridian","showSeconds","DYNAMIC_VALIDATORS","InjectionToken","DEFAULT_ERROR_STATE_MATCHER","touched","DYNAMIC_ERROR_MESSAGES_MATCHER","DynamicFormValidationService","_NG_VALIDATORS","_NG_ASYNC_VALIDATORS","_DYNAMIC_VALIDATORS","_DYNAMIC_ERROR_MESSAGES_MATCHER","getValidatorFn","validatorName","validatorArgs","validatorsToken","validatorFn","Validators","find","validator","getValidatorFns","validatorsConfig","validatorFns","keys","validatorConfigKey","validatorConfigValue","isValidatorDescriptor","descriptor","args","getValidator","getAsyncValidator","getValidators","getAsyncValidators","asyncValidatorsConfig","updateValidators","clearValidators","setValidators","updateValueAndValidity","updateAsyncValidators","clearAsyncValidators","setAsyncValidators","precondition","hasErrorMessages","matcher","parseErrorMessageConfig","replace","_match","expression","propertySource","propertyName","indexOf","messages","messagesConfig_1","errors","validationErrorKey","messageKey","validationError","getError","messageTemplate","isFormHook","values","includes","Optional","Inject","NG_VALIDATORS","NG_ASYNC_VALIDATORS","Map","Injectable","providedIn","Function","DYNAMIC_FORM_CONTROL_MAP_FN","DynamicFormComponentService","forms","formControls","getForms","getFormControlRef","modelId","arrayRef","console","warn","getCustomComponentType","DynamicFormService","createAbstractControlOptions","createFormArray","formArrayModel","controls","groupModel","groupOptions","createFormGroup","FormArray","formModel","controlState","controlOptions","FormControl","FormGroup","getPathSegment","getPath","path","unshift","addFormGroupControl","formGroup","models","insertFormGroupControl","moveFormGroupControl","controlName","idx","addControl","removeFormGroupControl","removeControl","addFormArrayGroup","formArray","insertFormArrayGroup","moveFormArrayGroup","newIndex","moveUp","movingGroups_1","at","formControl","position","setControl","removeFormArrayGroup","removeAt","clearFormArray","findById","result","findByIdFn","groupModel_1","groupModel_1_1","findModelById","findControlByModel","root","formComponent","form","fromJSON","formModelJSON","JSON","parse","formArrayModel_1","inputModel","DYNAMIC_MATCHERS","DISABLED_MATCHER","match","opposingMatch","hasMatch","HIDDEN_MATCHER","REQUIRED_MATCHER","injector","DISABLED_MATCHER_PROVIDER","provide","useValue","multi","HIDDEN_MATCHER_PROVIDER","REQUIRED_MATCHER_PROVIDER","DYNAMIC_MATCHER_PROVIDERS","DynamicFormLayoutService","split","substring","trim","filterCallback","modelType","filter","getAlignedTemplate","alignment","Start","cls","host","DynamicFormRelationService","MATCHERS","getRelatedFormControls","conditionReducer","condition","rootPath","relation","when","findRelationByMatcher","matchesCondition","relatedFormControls","operator","hasAlreadyMatched","relatedFormControl","entries","status","relatedControl","startWith","statusChanges","merge","Injector","AUTOFILL_TOKENS_ADDRESS","AUTOFILL_TOKENS_CONTACT","AUTOFILL_FIELDS","AUTOFILL_FIELDS_CONTACT","DynamicFormsCoreModule","forRoot","ngModule","DynamicFormsCoreModule_1","providers","NgModule","imports","CommonModule","ReactiveFormsModule","declarations","exports","dirty","token","tokens","toExpression","total","currentValue","tokensAddress","tokensContact","fields","fieldsContact"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export function isBoolean(value: any): value is boolean {\n    return typeof value === \"boolean\";\n}\n\n// tslint:disable-next-line:ban-types\nexport function isFunction(value: any): value is Function {\n    return typeof value === \"function\";\n}\n\nexport function isNumber(value: any): value is number {\n    return typeof value === \"number\";\n}\n\nexport function isObject(value: any): value is object {\n    return typeof value === \"object\" && value !== null;\n}\n\nexport function isString(value: any): value is string {\n    return typeof value === \"string\";\n}\n","import { FormControl, FormGroup } from \"@angular/forms\";\nimport { DynamicFormControlModel } from \"../model/dynamic-form-control.model\";\nimport { DynamicFormArrayGroupModel } from \"../model/form-array/dynamic-form-array.model\";\nimport { isObject } from \"../utils/core.utils\";\n\nexport enum DynamicFormControlEventType {\n    Blur = \"blur\",\n    Change = \"change\",\n    Focus = \"focus\"\n}\n\nexport interface DynamicFormControlEvent {\n\n    $event: Event | FocusEvent | DynamicFormControlEvent | any;\n    context: DynamicFormArrayGroupModel | null;\n    control: FormControl;\n    group: FormGroup;\n    model: DynamicFormControlModel;\n    type: string;\n}\n\nexport interface DynamicFormControlCustomEvent {\n\n    customEvent: any;\n    customEventType: string;\n}\n\nexport function isDynamicFormControlEvent($event: any): $event is DynamicFormControlEvent {\n    return isObject($event) && $event.hasOwnProperty(\"$event\");\n}\n","export interface DynamicValidatorDescriptor {\n    name: string;\n    args: any;\n}\n\nexport type DynamicValidatorsConfig = { [validatorKey: string]: any | DynamicValidatorDescriptor };\n\nexport enum DynamicFormHook {\n    Blur = \"blur\",\n    Change = \"change\",\n    Submit = \"submit\"\n}\n","import { EventEmitter } from \"@angular/core\";\nimport { AbstractControl, FormGroup } from \"@angular/forms\";\nimport { DynamicFormControl } from \"./dynamic-form-control-interface\";\nimport { DynamicFormControlCustomEvent } from \"./dynamic-form-control-event\";\nimport { DynamicFormControlModel } from \"../model/dynamic-form-control.model\";\nimport {\n    DynamicFormControlLayout,\n    DynamicFormControlLayoutContext,\n    DynamicFormControlLayoutPlace\n} from \"../model/misc/dynamic-form-control-layout.model\";\nimport { DynamicFormValidationService } from \"../service/dynamic-form-validation.service\";\nimport {\n    DynamicFormLayout,\n    DynamicFormLayoutService,\n    DynamicFormControlTemplates\n} from \"../service/dynamic-form-layout.service\";\nimport { isString } from \"../utils/core.utils\";\n\nexport abstract class DynamicFormControlComponent implements DynamicFormControl {\n\n    private _hasFocus = false;\n\n    formLayout: DynamicFormLayout;\n    group: FormGroup;\n    layout: DynamicFormControlLayout;\n    model: DynamicFormControlModel;\n    templates: DynamicFormControlTemplates;\n\n    blur: EventEmitter<any>;\n    change: EventEmitter<any>;\n    customEvent: EventEmitter<DynamicFormControlCustomEvent>;\n    focus: EventEmitter<any>;\n\n    protected constructor(protected layoutService: DynamicFormLayoutService,\n                          protected validationService: DynamicFormValidationService) {\n    }\n\n    get control(): AbstractControl | never {\n\n        const control = this.group.get(this.model.id);\n\n        if (control === null) {\n            throw new Error(`form group does not contain an abstract control with id ${this.model.id}`);\n        }\n\n        return control as AbstractControl;\n    }\n\n    get id(): string {\n        return this.layoutService.getElementId(this.model);\n    }\n\n    get hasFocus(): boolean {\n        return this._hasFocus;\n    }\n\n    get isInvalid(): boolean {\n        return this.control.invalid;\n    }\n\n    get isValid(): boolean {\n        return this.control.valid;\n    }\n\n    get errorMessages(): string[] {\n        return this.validationService.createErrorMessages(this.control, this.model);\n    }\n\n    get showErrorMessages(): boolean {\n        return this.validationService.showErrorMessages(this.control, this.model, this.hasFocus);\n    }\n\n    getClass(context: DynamicFormControlLayoutContext, place: DynamicFormControlLayoutPlace,\n             model: DynamicFormControlModel = this.model): string {\n\n        const controlLayout = model === this.model ? this.layout :\n            this.layoutService.findByModel(model, this.formLayout) ?? model.layout as DynamicFormControlLayout;\n\n        return this.layoutService.getClass(controlLayout, context, place);\n    }\n\n    onBlur($event: any) {\n\n        if ($event instanceof Event) {\n            $event.stopPropagation();\n        }\n\n        this._hasFocus = false;\n        this.blur.emit($event);\n    }\n\n    onChange($event: any) {\n\n        if ($event instanceof Event) {\n            $event.stopPropagation();\n        }\n\n        this.change.emit($event);\n    }\n\n    onCustomEvent($event: any, type: string | null = null, bypass: boolean = false) {\n\n        if (bypass) {\n\n            this.customEvent.emit($event);\n\n        } else if (isString(type)) {\n\n            this.customEvent.emit({customEvent: $event, customEventType: type});\n        }\n    }\n\n    onFocus($event: any) {\n\n        if ($event instanceof Event) {\n            $event.stopPropagation();\n        }\n\n        this._hasFocus = true;\n        this.focus.emit($event);\n    }\n}\n","import { QueryList } from \"@angular/core\";\nimport { FormArray } from \"@angular/forms\";\nimport { DynamicFormControlComponent } from \"./dynamic-form-control.component\";\nimport { DynamicTemplateDirective } from \"../directive/dynamic-template.directive\";\nimport { DynamicFormArrayModel } from \"../model/form-array/dynamic-form-array.model\";\nimport { DynamicFormControlContainerComponent } from \"./dynamic-form-control-container.component\";\n\nexport abstract class DynamicFormArrayComponent extends DynamicFormControlComponent {\n\n    components: QueryList<DynamicFormControlContainerComponent>;\n    model: DynamicFormArrayModel;\n    templates: QueryList<DynamicTemplateDirective> | undefined;\n\n    get array(): FormArray {\n        return this.control as FormArray;\n    }\n\n    get startTemplate(): DynamicTemplateDirective | undefined {\n        return this.layoutService.getStartTemplate(this.model, this.templates);\n    }\n\n    get endTemplate(): DynamicTemplateDirective | undefined {\n        return this.layoutService.getEndTemplate(this.model, this.templates);\n    }\n\n    markForCheck() {\n        if (this.components instanceof QueryList) {\n            this.components.forEach(component => component.markForCheck());\n        }\n    }\n}\n","import { DynamicFormControlComponent } from \"./dynamic-form-control.component\";\nimport { DynamicFormGroupModel } from \"../model/form-group/dynamic-form-group.model\";\nimport { QueryList } from \"@angular/core\";\nimport { DynamicFormControlContainerComponent } from \"./dynamic-form-control-container.component\";\n\nexport abstract class DynamicFormGroupComponent extends DynamicFormControlComponent {\n\n    components: QueryList<DynamicFormControlContainerComponent>;\n    model: DynamicFormGroupModel;\n\n    markForCheck() {\n        if (this.components instanceof QueryList) {\n            this.components.forEach(component => component.markForCheck());\n        }\n    }\n}\n","import { ChangeDetectorRef, EventEmitter, OnDestroy, OnInit, QueryList } from \"@angular/core\";\nimport { FormGroup } from \"@angular/forms\";\nimport { DynamicFormControlContainerComponent } from \"./dynamic-form-control-container.component\";\nimport { DynamicFormControlEvent } from \"./dynamic-form-control-event\";\nimport { DynamicFormControlModel } from \"../model/dynamic-form-control.model\";\nimport { DynamicFormModel } from \"../model/dynamic-form.model\";\nimport { DynamicTemplateDirective } from \"../directive/dynamic-template.directive\";\nimport { DynamicFormLayout } from \"../service/dynamic-form-layout.service\";\nimport { DynamicFormComponentService } from \"../service/dynamic-form-component.service\";\n\nexport abstract class DynamicFormComponent implements OnInit, OnDestroy {\n\n    group: FormGroup;\n    model: DynamicFormModel;\n    layout: DynamicFormLayout;\n\n    components: QueryList<DynamicFormControlContainerComponent>;\n    templates: QueryList<DynamicTemplateDirective>;\n\n    blur: EventEmitter<DynamicFormControlEvent>;\n    change: EventEmitter<DynamicFormControlEvent>;\n    focus: EventEmitter<DynamicFormControlEvent>;\n\n    protected constructor(protected changeDetectorRef: ChangeDetectorRef,\n                          protected componentService: DynamicFormComponentService) {\n    }\n\n    ngOnInit(): void {\n        this.componentService.registerForm(this);\n    }\n\n    ngOnDestroy(): void {\n        this.componentService.unregisterForm(this);\n    }\n\n    trackByFn(_index: number, model: DynamicFormControlModel): string {\n        return model.id;\n    }\n\n    markForCheck(): void {\n        this.changeDetectorRef.markForCheck();\n\n        if (this.components instanceof QueryList) {\n            this.components.forEach(component => component.markForCheck());\n        }\n    }\n\n    detectChanges(): void {\n        this.changeDetectorRef.detectChanges();\n    }\n\n    onBlur($event: DynamicFormControlEvent) {\n        this.blur.emit($event);\n    }\n\n    onChange($event: DynamicFormControlEvent) {\n        this.change.emit($event);\n    }\n\n    onFocus($event: DynamicFormControlEvent) {\n        this.focus.emit($event);\n    }\n\n    onCustomEvent($event: DynamicFormControlEvent, customEventEmitter: EventEmitter<DynamicFormControlEvent>) {\n        customEventEmitter.emit($event);\n    }\n}\n","import \"reflect-metadata\";\n\ndeclare let Reflect: any;\n\nexport const METADATA_KEY_SERIALIZABLE = \"SERIALIZABLE\";\n\nexport interface SerializableProperty {\n\n    key: string;\n    name: string;\n}\n\nexport function serializable(name?: string): (target: any, key: string) => void {\n\n    return (target, key) => {\n        Reflect.defineMetadata(METADATA_KEY_SERIALIZABLE, {key, name: name || key}, target, key);\n    };\n}\n\nexport function getSerializables(target: any): SerializableProperty[] {\n\n    const serializables = [];\n\n    for (const key in target) {\n\n        const metadata = Reflect.getMetadata(METADATA_KEY_SERIALIZABLE, target, key);\n\n        if (metadata) {\n            serializables.push(metadata);\n        }\n    }\n\n    return serializables;\n}\n\nexport function serialize(target: any, prototype?: any): object {\n\n    return getSerializables(prototype || target).reduce((prev: any, prop: SerializableProperty) => {\n\n        prev[prop.name] = target[prop.key];\n\n        return prev;\n\n    }, {});\n}\n","import { BehaviorSubject, Observable } from \"rxjs\";\nimport { DynamicFormControlLayout } from \"./misc/dynamic-form-control-layout.model\";\nimport { DynamicPathable } from \"./misc/dynamic-form-control-path.model\";\nimport { DynamicFormControlRelation } from \"./misc/dynamic-form-control-relation.model\";\nimport { DynamicFormHook, DynamicValidatorsConfig } from \"./misc/dynamic-form-control-validation.model\";\nimport { serializable, serialize } from \"../decorator/serializable.decorator\";\nimport { isBoolean, isObject, isString } from \"../utils/core.utils\";\n\nexport interface DynamicFormControlModelConfig {\n\n    asyncValidators?: DynamicValidatorsConfig;\n    disabled?: boolean;\n    errorMessages?: DynamicValidatorsConfig;\n    hidden?: boolean;\n    id: string;\n    label?: string;\n    labelTooltip?: string;\n    controlTooltip?: string;\n    name?: string;\n    relations?: DynamicFormControlRelation[];\n    updateOn?: DynamicFormHook;\n    validators?: DynamicValidatorsConfig;\n}\n\nexport abstract class DynamicFormControlModel implements DynamicPathable {\n\n    @serializable() asyncValidators: DynamicValidatorsConfig | null;\n    @serializable(\"disabled\") _disabled: boolean;\n    @serializable() errorMessages: DynamicValidatorsConfig | null;\n    @serializable() hidden: boolean;\n    @serializable() id: string;\n    @serializable() label: string | null;\n    @serializable() labelTooltip: string | null;\n    @serializable() controlTooltip: string | null;\n    @serializable() layout: DynamicFormControlLayout | null;\n    @serializable() name: string;\n    parent: DynamicPathable | null = null;\n    @serializable() relations: DynamicFormControlRelation[];\n    @serializable() updateOn: DynamicFormHook | null;\n    @serializable() validators: DynamicValidatorsConfig | null;\n\n    private readonly disabled$: BehaviorSubject<boolean>;\n\n    readonly disabledChanges: Observable<boolean>;\n\n    abstract readonly type: string;\n\n    protected constructor(config: DynamicFormControlModelConfig, layout: DynamicFormControlLayout | null = null) {\n\n        this.asyncValidators = config.asyncValidators ?? null;\n        this.errorMessages = config.errorMessages ?? null;\n        this.hidden = isBoolean(config.hidden) ? config.hidden : false;\n        this.id = config.id;\n        this.label = config.label ?? null;\n        this.labelTooltip = config.labelTooltip ?? null;\n        this.controlTooltip = config.controlTooltip ?? null;\n        this.layout = layout;\n        this.name = config.name ?? config.id;\n        this.relations = Array.isArray(config.relations) ? config.relations : [];\n        this.updateOn = isString(config.updateOn) ? config.updateOn : null;\n        this.validators = config.validators ?? null;\n\n        this.disabled$ = new BehaviorSubject(isBoolean(config.disabled) ? config.disabled : false);\n        this.disabled$.subscribe(disabled => this._disabled = disabled);\n        this.disabledChanges = this.disabled$.asObservable();\n    }\n\n    get disabled(): boolean {\n        return this.disabled$.getValue();\n    }\n\n    set disabled(disabled: boolean) {\n        this.disabled$.next(disabled);\n    }\n\n    get hasErrorMessages(): boolean {\n        return isObject(this.errorMessages);\n    }\n\n    toJSON() {\n        return serialize(this);\n    }\n}\n","import { BehaviorSubject, Observable } from \"rxjs\";\nimport { DynamicFormControlModel, DynamicFormControlModelConfig } from \"./dynamic-form-control.model\";\nimport { DynamicFormControlLayout } from \"./misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../decorator/serializable.decorator\";\nimport { isBoolean, isObject } from \"../utils/core.utils\";\n\nexport interface DynamicFormValueControlModelConfig<T> extends DynamicFormControlModelConfig {\n\n    additional?: { [key: string]: any };\n    hint?: string;\n    required?: boolean;\n    tabIndex?: number;\n    value?: T;\n}\n\nexport abstract class DynamicFormValueControlModel<T> extends DynamicFormControlModel {\n\n    @serializable() additional: { [key: string]: any } | null;\n    @serializable() hint: string | null;\n    @serializable() required: boolean;\n    @serializable() tabIndex: number | null;\n    @serializable(\"value\") private _value: T | null;\n\n    private readonly value$: BehaviorSubject<T>;\n\n    readonly valueChanges: Observable<T>;\n\n    protected constructor(config: DynamicFormValueControlModelConfig<T>, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.additional = isObject(config.additional) ? config.additional : null;\n        this.hint = config.hint ?? null;\n        this.required = isBoolean(config.required) ? config.required : false;\n        this.tabIndex = config.tabIndex ?? null;\n\n        this.value$ = new BehaviorSubject(config.value ?? null);\n        this.value$.subscribe(value => this._value = value);\n        this.valueChanges = this.value$.asObservable();\n    }\n\n    get value(): T | null {\n        return this.value$.getValue();\n    }\n\n    set value(value: T | null) {\n        this.value$.next(value);\n    }\n\n    getAdditional(key: string, defaultValue?: any | null): any {\n        return this.additional !== null && this.additional.hasOwnProperty(key) ? this.additional[key] : defaultValue;\n    }\n}\n","import { DynamicFormControlModel, DynamicFormControlModelConfig } from \"../dynamic-form-control.model\";\nimport { DynamicFormModel } from \"../dynamic-form.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { DynamicPathable } from \"../misc/dynamic-form-control-path.model\";\nimport { DynamicValidatorsConfig } from \"../misc/dynamic-form-control-validation.model\";\nimport { serializable, serialize } from \"../../decorator/serializable.decorator\";\nimport { isFunction, isNumber } from \"../../utils/core.utils\";\n\nexport class DynamicFormArrayGroupModel implements DynamicPathable {\n\n    $implicit: DynamicFormArrayGroupModel;\n    context: DynamicFormArrayModel;\n    @serializable() group: DynamicFormModel;\n    @serializable() index: number;\n\n    constructor(context: DynamicFormArrayModel, group: DynamicFormModel = [], index: number = -1) {\n\n        this.$implicit = this;\n        this.context = context;\n        this.group = group;\n        this.index = index;\n    }\n\n    get parent(): DynamicFormArrayModel {\n        return this.context;\n    }\n\n    get(index: number): DynamicFormControlModel {\n        return this.group[index];\n    }\n\n    toJSON() {\n        return serialize(this);\n    }\n}\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_ARRAY = \"ARRAY\";\n\nexport interface DynamicFormArrayModelConfig extends DynamicFormControlModelConfig {\n\n    groupAsyncValidators?: DynamicValidatorsConfig;\n    groupFactory?: () => DynamicFormModel;\n    groupValidators?: DynamicValidatorsConfig;\n    groups?: DynamicFormArrayGroupModel[] | null;\n    initialCount?: number;\n}\n\nexport class DynamicFormArrayModel extends DynamicFormControlModel {\n\n    @serializable() groupAsyncValidators: DynamicValidatorsConfig | null;\n    groupFactory: () => DynamicFormModel;\n    @serializable() groupValidators: DynamicValidatorsConfig | null;\n    @serializable() groups: DynamicFormArrayGroupModel[] = [];\n    @serializable() initialCount: number;\n\n    @serializable() readonly groupPrototype: DynamicFormModel; // only to recreate model from JSON\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_ARRAY;\n\n    constructor(config: DynamicFormArrayModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        if (isFunction(config.groupFactory)) {\n            this.groupFactory = config.groupFactory;\n        } else {\n            throw new Error(\"group factory function must be specified for DynamicFormArrayModel\");\n        }\n\n        this.groupAsyncValidators = config.groupAsyncValidators ?? null;\n        this.groupPrototype = this.groupFactory();\n        this.groupValidators = config.groupValidators ?? null;\n        this.initialCount = isNumber(config.initialCount) ? config.initialCount : 1;\n\n        if (Array.isArray(config.groups)) {\n\n            config.groups.forEach((arrayGroup, index) => {\n                this.groups.push(new DynamicFormArrayGroupModel(this, arrayGroup.group, arrayGroup.index ?? index));\n            });\n\n        } else {\n\n            for (let index = 0; index < this.initialCount; index++) {\n                this.addGroup();\n            }\n        }\n    }\n\n    private updateGroupIndex(): void {\n        this.groups.forEach((group, index) => group.index = index);\n    }\n\n    get size(): number {\n        return this.groups.length;\n    }\n\n    get(index: number): DynamicFormArrayGroupModel {\n        return this.groups[index];\n    }\n\n    addGroup(): DynamicFormArrayGroupModel {\n        return this.insertGroup(this.groups.length);\n    }\n\n    insertGroup(index: number): DynamicFormArrayGroupModel {\n\n        let group = new DynamicFormArrayGroupModel(this, this.groupFactory());\n\n        this.groups.splice(index, 0, group);\n        this.updateGroupIndex();\n\n        return group;\n    }\n\n    moveGroup(index: number, step: number): void {\n\n        this.groups.splice(index + step, 0, ...this.groups.splice(index, 1));\n        this.updateGroupIndex();\n    }\n\n    removeGroup(index: number): void {\n\n        this.groups.splice(index, 1);\n        this.updateGroupIndex();\n    }\n\n    clear(): void {\n        this.groups.splice(0);\n        this.updateGroupIndex();\n    }\n}\n","import { DynamicFormValueControlModel, DynamicFormValueControlModelConfig } from \"./dynamic-form-value-control.model\";\nimport { DynamicFormControlLayout } from \"./misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../decorator/serializable.decorator\";\nimport { isBoolean } from \"../utils/core.utils\";\n\nexport interface DynamicCheckControlModelConfig extends DynamicFormValueControlModelConfig<boolean> {\n\n    labelPosition?: string;\n}\n\nexport abstract class DynamicCheckControlModel extends DynamicFormValueControlModel<boolean> {\n\n    @serializable() labelPosition: string | null;\n\n    protected constructor(config: DynamicCheckControlModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.labelPosition = config.labelPosition ?? null;\n        this.checked = isBoolean(this.value) ? this.value : false;\n    }\n\n    get checked(): boolean {\n        return this.value;\n    }\n\n    set checked(checked: boolean) {\n        this.value = checked;\n    }\n\n    toggle(): void {\n        this.checked = !this.checked;\n    }\n}\n","import { DynamicCheckControlModel, DynamicCheckControlModelConfig } from \"../dynamic-check-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\nimport { isBoolean } from \"../../utils/core.utils\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX = \"CHECKBOX\";\n\nexport interface DynamicCheckboxModelConfig extends DynamicCheckControlModelConfig {\n\n    indeterminate?: boolean;\n}\n\nexport class DynamicCheckboxModel extends DynamicCheckControlModel {\n\n    @serializable() indeterminate: boolean;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX;\n\n    constructor(config: DynamicCheckboxModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.indeterminate = isBoolean(config.indeterminate) ? config.indeterminate : false;\n    }\n}","import { DynamicFormValueControlModel, DynamicFormValueControlModelConfig } from \"./dynamic-form-value-control.model\";\nimport { DynamicFormControlLayout } from \"./misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../decorator/serializable.decorator\";\nimport { isBoolean, isNumber } from \"../utils/core.utils\";\n\nexport interface DynamicInputControlModelConfig<T> extends DynamicFormValueControlModelConfig<T> {\n\n    autoComplete?: string;\n    autoFocus?: boolean;\n    maxLength?: number;\n    minLength?: number;\n    placeholder?: string;\n    prefix?: string;\n    readOnly?: boolean;\n    spellCheck?: boolean;\n    suffix?: string;\n}\n\nexport abstract class DynamicInputControlModel<T> extends DynamicFormValueControlModel<T> {\n\n    @serializable() autoComplete: string;\n    @serializable() autoFocus: boolean;\n    @serializable() maxLength: number | null;\n    @serializable() minLength: number | null;\n    @serializable() placeholder: string;\n    @serializable() prefix: string | null;\n    @serializable() readOnly: boolean;\n    @serializable() spellCheck: boolean;\n    @serializable() suffix: string | null;\n\n    protected constructor(config: DynamicInputControlModelConfig<T>, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.autoComplete = config.autoComplete ?? \"on\";\n        this.autoFocus = isBoolean(config.autoFocus) ? config.autoFocus : false;\n        this.maxLength = isNumber(config.maxLength) ? config.maxLength : null;\n        this.minLength = isNumber(config.minLength) ? config.minLength : null;\n        this.placeholder = config.placeholder ?? \"\";\n        this.prefix = config.prefix ?? null;\n        this.readOnly = isBoolean(config.readOnly) ? config.readOnly : false;\n        this.spellCheck = isBoolean(config.spellCheck) ? config.spellCheck : false;\n        this.suffix = config.suffix ?? null;\n    }\n}\n","import { isString } from \"./core.utils\";\n\nexport function maskToString(mask: string | RegExp | (string | RegExp)[]): string | string[] | null {\n\n    if (isString(mask)) {\n\n        return mask as string;\n\n    } else if (mask instanceof RegExp) {\n\n        return mask.toString();\n\n    } else if (Array.isArray(mask)) {\n\n        return mask.map(value => maskToString(value)) as string[];\n    }\n\n    return null;\n}\n\nexport function maskFromString(mask: string | string[]): string | RegExp | (string | RegExp)[] | null {\n\n    if (isString(mask)) {\n\n        const isRegExp = (mask as string).startsWith(\"/\") && (mask as string).endsWith(\"/\");\n\n        return isRegExp ? new RegExp((mask as string).slice(1, mask.length - 1)) : mask;\n\n    } else if (Array.isArray(mask)) {\n\n        return (mask as string[]).map(value => maskFromString(value)) as string[];\n    }\n\n    return null;\n}\n\nexport function parseReviver(_key: string, value: any): any {\n\n    const regexDateISO = /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}(?:\\.\\d*))(?:Z|([+\\-])([\\d|:]*))?$/;\n\n    return isString(value) && regexDateISO.test(value) ? new Date(value) : value;\n}\n","import { Directive, Input, TemplateRef } from \"@angular/core\";\n\nexport enum DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT {\n    Start = \"START\",\n    End = \"END\"\n}\n\n@Directive({\n    selector: \"ng-template[modelId],ng-template[modelType]\"\n})\nexport class DynamicTemplateDirective {\n\n    @Input() align: string = DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT.End;\n    @Input() as: string | null = null;\n    @Input() index: number | undefined;\n    @Input() modelId: string;\n    @Input() modelType: string;\n\n    constructor(public templateRef: TemplateRef<any>) {\n    }\n}\n","import { DynamicInputControlModel, DynamicInputControlModelConfig } from \"../dynamic-input-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\nimport { maskToString } from \"../../utils/json.utils\";\nimport { isBoolean, isFunction, isNumber } from \"../../utils/core.utils\";\nimport { Observable, isObservable, of } from \"rxjs\";\nimport { tap } from \"rxjs/operators\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_INPUT = \"INPUT\";\n\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_COLOR = \"color\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_DATE = \"date\";\n//export const DYNAMIC_FORM_CONTROL_INPUT_TYPE_DATETIME = \"datetime\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_DATETIME_LOCAL = \"datetime-local\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_EMAIL = \"email\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_FILE = \"file\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_MONTH = \"month\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_NUMBER = \"number\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_PASSWORD = \"password\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_RANGE = \"range\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_SEARCH = \"search\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_TEL = \"tel\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_TEXT = \"text\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_TIME = \"time\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_URL = \"url\";\nexport const DYNAMIC_FORM_CONTROL_INPUT_TYPE_WEEK = \"week\";\n\nexport interface DynamicInputModelConfig extends DynamicInputControlModelConfig<string | number | Date | string[]> {\n\n    accept?: string;\n    inputType?: string;\n    list?: any[] | Observable<any[]>;\n    mask?: string | RegExp | Function | (string | RegExp)[];\n    max?: number | string | Date;\n    min?: number | string | Date;\n    multiple?: boolean;\n    pattern?: string;\n    step?: number;\n}\n\nexport class DynamicInputModel extends DynamicInputControlModel<string | number | Date | string[]> {\n\n    @serializable() accept: string | null;\n    @serializable() inputType: string;\n    files: FileList | null = null;\n    list$: Observable<any[]> | null = null;\n    @serializable() mask: string | RegExp | Function | (string | RegExp)[] | null;\n    @serializable() max: number | string | Date | null;\n    @serializable() min: number | string | Date | null;\n    @serializable() multiple: boolean | null;\n    @serializable() pattern: string | null;\n    @serializable() step: number | null;\n\n    @serializable(\"list\") private _list: any[] | null = null;\n    private readonly _listId: string | null = null;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_INPUT;\n\n    constructor(config: DynamicInputModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.accept = config.accept ?? null;\n        this.inputType = config.inputType ?? DYNAMIC_FORM_CONTROL_INPUT_TYPE_TEXT;\n        this.mask = config.mask ?? null;\n        this.max = config.max !== undefined ? config.max : null;\n        this.min = config.min !== undefined ? config.min : null;\n        this.multiple = isBoolean(config.multiple) ? config.multiple : null;\n        this.pattern = config.pattern ?? null;\n        this.step = isNumber(config.step) ? config.step : null;\n\n        if (config.list !== undefined) {\n\n            this.list = config.list;\n            this._listId = `${this.id}List`;\n        }\n    }\n\n    get listId(): string | null {\n        return this._listId;\n    }\n\n    get hasList(): boolean {\n        return isObservable(this.list$);\n    }\n\n    set list(list: any[] | Observable<any[]> | null) {\n\n        if (Array.isArray(list)) {\n\n            this._list = list;\n            this.list$ = of(this._list);\n\n        } else if (isObservable(list)) {\n\n            this.list$ = list.pipe(tap(list => this._list = list));\n\n        } else {\n\n            this._list = null;\n            this.list$ = null;\n        }\n    }\n\n    toJSON() {\n\n        const json: any = super.toJSON();\n\n        if (this.mask !== null) {\n            json.mask = isFunction(this.mask) ? this.mask : maskToString(this.mask);\n        }\n\n        return json;\n    }\n}\n","import {\n    ChangeDetectorRef,\n    ComponentFactoryResolver,\n    ComponentRef,\n    EventEmitter,\n    OnChanges,\n    OnDestroy,\n    QueryList,\n    SimpleChanges,\n    Type,\n    ViewContainerRef\n} from \"@angular/core\";\nimport { FormControl, FormGroup } from \"@angular/forms\";\nimport { Subscription } from \"rxjs\";\nimport {\n    DynamicFormControlCustomEvent,\n    DynamicFormControlEvent,\n    DynamicFormControlEventType,\n    isDynamicFormControlEvent\n} from \"./dynamic-form-control-event\";\nimport { DynamicFormControlModel } from \"../model/dynamic-form-control.model\";\nimport { DynamicFormValueControlModel } from \"../model/dynamic-form-value-control.model\";\nimport {\n    DYNAMIC_FORM_CONTROL_TYPE_ARRAY,\n    DynamicFormArrayGroupModel\n} from \"../model/form-array/dynamic-form-array.model\";\nimport { DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX } from \"../model/checkbox/dynamic-checkbox.model\";\nimport {\n    DYNAMIC_FORM_CONTROL_INPUT_TYPE_FILE,\n    DYNAMIC_FORM_CONTROL_TYPE_INPUT,\n    DynamicInputModel\n} from \"../model/input/dynamic-input.model\";\nimport {\n    DynamicFormControlLayout,\n    DynamicFormControlLayoutContext,\n    DynamicFormControlLayoutPlace\n} from \"../model/misc/dynamic-form-control-layout.model\";\nimport { DynamicFormControl } from \"./dynamic-form-control-interface\";\nimport { DynamicTemplateDirective } from \"../directive/dynamic-template.directive\";\nimport { DynamicFormLayout, DynamicFormLayoutService } from \"../service/dynamic-form-layout.service\";\nimport { DynamicFormValidationService } from \"../service/dynamic-form-validation.service\";\nimport { DynamicFormComponentService } from \"../service/dynamic-form-component.service\";\nimport { isString } from \"../utils/core.utils\";\nimport { DynamicFormRelationService } from \"../service/dynamic-form-relation.service\";\nimport { DynamicFormGroupComponent } from \"./dynamic-form-group.component\";\nimport { DynamicFormArrayComponent } from \"./dynamic-form-array.component\";\n\nexport abstract class DynamicFormControlContainerComponent implements OnChanges, OnDestroy {\n\n    private _hasFocus = false;\n\n    context: DynamicFormArrayGroupModel | null = null;\n    control: FormControl;\n    group: FormGroup;\n    hostClass: string[];\n    klass: string;\n    layout: DynamicFormLayout;\n    model: DynamicFormControlModel;\n\n    contentTemplateList: QueryList<DynamicTemplateDirective> | undefined;\n    inputTemplateList: QueryList<DynamicTemplateDirective> | undefined;\n\n    blur: EventEmitter<DynamicFormControlEvent>;\n    change: EventEmitter<DynamicFormControlEvent>;\n    customEvent: EventEmitter<DynamicFormControlEvent> | undefined;\n    focus: EventEmitter<DynamicFormControlEvent>;\n\n    componentViewContainerRef: ViewContainerRef;\n\n    protected componentRef: ComponentRef<DynamicFormControl>;\n    protected componentSubscriptions: Subscription[] = [];\n    protected controlLayout: DynamicFormControlLayout;\n    protected subscriptions: Subscription[] = [];\n\n    protected constructor(protected changeDetectorRef: ChangeDetectorRef,\n                          protected componentFactoryResolver: ComponentFactoryResolver,\n                          protected layoutService: DynamicFormLayoutService,\n                          protected validationService: DynamicFormValidationService,\n                          protected componentService: DynamicFormComponentService,\n                          protected relationService: DynamicFormRelationService) {\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n\n        const groupChange = (changes as Pick<SimpleChanges, \"group\">).group;\n        const layoutChange = (changes as Pick<SimpleChanges, \"layout\">).layout;\n        const modelChange = (changes as Pick<SimpleChanges, \"model\">).model;\n\n        if (layoutChange || modelChange) {\n            this.onLayoutOrModelChange();\n        }\n\n        if (modelChange) {\n            this.onModelChange();\n        }\n\n        if (groupChange || modelChange) {\n            this.onGroupOrModelChange();\n        }\n    }\n\n    ngOnDestroy() {\n\n        this.destroyFormControlComponent();\n        this.unsubscribe();\n    }\n\n    abstract get componentType(): Type<DynamicFormControl> | null;\n\n    get id(): string {\n        return this.layoutService.getElementId(this.model);\n    }\n\n    get hasFocus(): boolean {\n        return this._hasFocus;\n    }\n\n    get isInvalid(): boolean {\n        return this.control.invalid;\n    }\n\n    get isValid(): boolean {\n        return this.control.valid;\n    }\n\n    get errorMessages(): string[] {\n        return this.validationService.createErrorMessages(this.control, this.model);\n    }\n\n    get showErrorMessages(): boolean {\n        return this.validationService.showErrorMessages(this.control, this.model, this.hasFocus);\n    }\n\n    get hasLabel(): boolean {\n        return isString(this.model.label);\n    }\n\n    get hasHint(): boolean {\n        return isString((this.model as DynamicFormValueControlModel<any>).hint);\n    }\n\n    get hint(): string | null {\n        return (this.model as DynamicFormValueControlModel<any>).hint ?? null;\n    }\n\n    get isCheckbox(): boolean {\n        return this.model.type === DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX;\n    }\n\n    get templates(): QueryList<DynamicTemplateDirective> | undefined {\n        return this.inputTemplateList !== undefined ? this.inputTemplateList : this.contentTemplateList;\n    }\n\n    get startTemplate(): DynamicTemplateDirective | undefined {\n        return this.model.type !== DYNAMIC_FORM_CONTROL_TYPE_ARRAY ?\n            this.layoutService.getStartTemplate(this.model, this.templates) : undefined;\n    }\n\n    get endTemplate(): DynamicTemplateDirective | undefined {\n        return this.model.type !== DYNAMIC_FORM_CONTROL_TYPE_ARRAY ?\n            this.layoutService.getEndTemplate(this.model, this.templates) : undefined;\n    }\n\n    getClass(context: DynamicFormControlLayoutContext, place: DynamicFormControlLayoutPlace): string {\n        return this.layoutService.getClass(this.controlLayout, context, place);\n    }\n\n    markForCheck(): void {\n\n        this.changeDetectorRef.markForCheck();\n\n        const component = this.componentRef && this.componentRef.instance;\n\n        if (component && (component instanceof DynamicFormGroupComponent || component instanceof DynamicFormArrayComponent)) {\n            component.markForCheck();\n        }\n    }\n\n    protected createFormControlComponent(): void {\n\n        const componentType = this.componentType;\n\n        if (componentType !== null) {\n\n            const componentFactory = this.componentFactoryResolver.resolveComponentFactory(componentType);\n\n            this.componentViewContainerRef.clear();\n            this.componentRef = this.componentViewContainerRef.createComponent(componentFactory);\n\n            const component = this.componentRef.instance;\n\n            component.formLayout = this.layout;\n            component.group = this.group;\n            component.layout = this.controlLayout;\n            component.model = this.model;\n\n            if (this.templates) {\n                component.templates = this.templates;\n            }\n\n            this.componentSubscriptions.push(component.blur.subscribe(($event: any) => this.onBlur($event)));\n            this.componentSubscriptions.push(component.change.subscribe(($event: any) => this.onChange($event)));\n            this.componentSubscriptions.push(component.focus.subscribe(($event: any) => this.onFocus($event)));\n\n            if (component.customEvent !== undefined) {\n                this.componentSubscriptions.push(\n                    component.customEvent.subscribe(($event: any) => this.onCustomEvent($event)));\n            }\n\n            this.registerFormControlComponentRef(this.componentRef);\n        }\n    }\n\n    protected destroyFormControlComponent(): void {\n\n        if (this.componentRef) {\n\n            this.componentSubscriptions.forEach(subscription => subscription.unsubscribe());\n            this.componentSubscriptions = [];\n\n            this.unregisterFormControlComponentRef();\n            this.componentRef.destroy();\n        }\n    }\n\n    protected createDynamicFormControlEvent($event: any, type: string): DynamicFormControlEvent {\n        return {$event, context: this.context, control: this.control, group: this.group, model: this.model, type};\n    }\n\n    unsubscribe(): void {\n\n        // this.componentSubscriptions.forEach(subscription => subscription.unsubscribe());\n        // this.componentSubscriptions = [];\n\n        this.subscriptions.forEach(subscription => subscription.unsubscribe());\n        this.subscriptions = [];\n    }\n\n    onControlValueChanges(value: any): void {\n        if (this.model instanceof DynamicFormValueControlModel && this.model.value !== value) {\n            this.model.value = value;\n        }\n    }\n\n    onModelValueUpdates(value: any): void {\n        if (this.control.value !== value) {\n            this.control.setValue(value);\n        }\n    }\n\n    onModelDisabledUpdates(disabled: boolean): void {\n        disabled ? this.control.disable() : this.control.enable();\n    }\n\n    onLayoutOrModelChange(): void {\n        this.controlLayout = this.layoutService.findByModel(this.model, this.layout) ?? this.model.layout as DynamicFormControlLayout;\n        this.klass = `${Array.isArray(this.hostClass) ? this.hostClass.join(\" \") : \"\"} ${this.layoutService.getHostClass(this.controlLayout)}`;\n    }\n\n    onModelChange(): void {\n        this.destroyFormControlComponent();\n        this.createFormControlComponent();\n    }\n\n    onGroupOrModelChange(): void {\n\n        if (this.model) {\n\n            this.unsubscribe();\n\n            if (this.group) {\n\n                this.control = this.group.get(this.model.id) as FormControl;\n                this.subscriptions.push(this.control.valueChanges.subscribe(value => this.onControlValueChanges(value)));\n            }\n\n            this.subscriptions.push(this.model.disabledChanges.subscribe(value => this.onModelDisabledUpdates(value)));\n\n            if (this.model instanceof DynamicFormValueControlModel) {\n\n                const model = this.model as DynamicFormValueControlModel<any>;\n\n                this.subscriptions.push(model.valueChanges.subscribe(value => this.onModelValueUpdates(value)));\n            }\n\n            if (this.model.relations.length > 0) {\n\n                this.subscriptions.push(...this.relationService.subscribeRelations(this.model, this.group, this.control));\n            }\n        }\n    }\n\n    onChange($event: Event | DynamicFormControlEvent | any): void {\n\n        if ($event instanceof Event) { // native HTML5 change event\n\n            if (this.model.type === DYNAMIC_FORM_CONTROL_TYPE_INPUT) {\n\n                const model = this.model as DynamicInputModel;\n\n                if (model.inputType === DYNAMIC_FORM_CONTROL_INPUT_TYPE_FILE) {\n\n                    const inputElement: any = $event.target ?? $event.srcElement;\n\n                    model.files = inputElement.files as FileList;\n                }\n            }\n\n            this.change.emit(this.createDynamicFormControlEvent($event, DynamicFormControlEventType.Change));\n\n        } else if (isDynamicFormControlEvent($event)) { // event bypass\n\n            this.change.emit($event);\n\n        } else { // custom library value change event\n\n            this.change.emit(this.createDynamicFormControlEvent($event, DynamicFormControlEventType.Change));\n        }\n    }\n\n    onBlur($event: FocusEvent | DynamicFormControlEvent | any): void {\n\n        if (isDynamicFormControlEvent($event)) { // event bypass\n\n            this.blur.emit($event);\n\n        } else { // native HTML 5 or UI library blur event\n\n            this._hasFocus = false;\n            this.blur.emit(this.createDynamicFormControlEvent($event, DynamicFormControlEventType.Blur));\n        }\n    }\n\n    onFocus($event: FocusEvent | DynamicFormControlEvent | any): void {\n\n        if (isDynamicFormControlEvent($event)) { // event bypass\n\n            this.focus.emit($event);\n\n        } else { // native HTML 5 or UI library focus event\n\n            this._hasFocus = true;\n            this.focus.emit(this.createDynamicFormControlEvent($event, DynamicFormControlEventType.Focus));\n        }\n    }\n\n    onCustomEvent($event: DynamicFormControlEvent | DynamicFormControlCustomEvent): void {\n\n        const emitter = this.customEvent as EventEmitter<DynamicFormControlEvent>;\n\n        if (isDynamicFormControlEvent($event)) { // child event bypass\n\n            emitter.emit($event);\n\n        } else { // native UI library custom event\n\n            emitter.emit(this.createDynamicFormControlEvent($event.customEvent, $event.customEventType));\n        }\n    }\n\n    private registerFormControlComponentRef(ref: ComponentRef<DynamicFormControl>): void {\n\n        if (this.context instanceof DynamicFormArrayGroupModel) {\n\n            this.componentService.registerFormControl(this.model, ref, this.context.index);\n\n        } else {\n            this.componentService.registerFormControl(this.model, ref);\n        }\n    }\n\n    private unregisterFormControlComponentRef(): void {\n\n        if (this.context instanceof DynamicFormArrayGroupModel) {\n\n            this.componentService.unregisterFormControl(this.model.id, this.context.index);\n\n        } else {\n            this.componentService.unregisterFormControl(this.model.id);\n        }\n    }\n}\n","import { AfterViewInit, QueryList, TemplateRef } from \"@angular/core\";\nimport { DynamicFormControlWithTemplate } from \"./dynamic-form-control-with-template-interface\";\nimport { DynamicTemplateDirective } from \"../directive/dynamic-template.directive\";\nimport { DynamicFormControlComponent } from \"./dynamic-form-control.component\";\nimport { isString } from \"../utils/core.utils\";\nimport { DynamicFormLayoutService } from \"../service/dynamic-form-layout.service\";\nimport { DynamicFormValidationService } from \"../service/dynamic-form-validation.service\";\n\nexport abstract class DynamicFormControlWithTemplateComponent extends DynamicFormControlComponent\n    implements DynamicFormControlWithTemplate, AfterViewInit {\n\n    readonly templateDirectives: Map<string, string>;\n\n    templates: QueryList<DynamicTemplateDirective> | DynamicTemplateDirective[] | undefined;\n\n    protected constructor(protected layoutService: DynamicFormLayoutService,\n                          protected validationService: DynamicFormValidationService) {\n        super(layoutService, validationService);\n    }\n\n    ngAfterViewInit() {\n\n        this.layoutService\n            .filterTemplatesByModel(this.model, this.templates)\n            .forEach(template => this.bindTemplate(template));\n    }\n\n    abstract get viewChild(): any;\n\n    abstract mapTemplate(template: DynamicTemplateDirective): DynamicTemplateDirective | TemplateRef<any>;\n\n    bindTemplate(template: DynamicTemplateDirective) {\n\n        if (isString(template.as) && this.templateDirectives.has(template.as)) {\n\n            const property = this.templateDirectives.get(template.as) as string;\n\n            this.viewChild[property] = this.mapTemplate(template);\n        }\n    }\n}\n","import { Directive, ElementRef, Input, Renderer2, AfterViewInit } from \"@angular/core\";\nimport { isString } from \"../utils/core.utils\";\n\n@Directive({\n    selector: \"[dynamicList]\"\n})\nexport class DynamicListDirective implements AfterViewInit {\n\n    @Input(\"dynamicList\") listId: string | null;\n\n    constructor(private elementRef: ElementRef, private renderer: Renderer2) {}\n\n    ngAfterViewInit() {\n\n        if (isString(this.listId)) {\n            this.renderer.setAttribute(this.elementRef.nativeElement, \"list\", this.listId as string);\n        }\n    }\n}","import { DynamicFormValueControlModelConfig, DynamicFormValueControlModel } from \"./dynamic-form-value-control.model\";\nimport { DynamicFormControlLayout } from \"./misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../decorator/serializable.decorator\";\n\nexport type DynamicDateControlValue = string | object | Date;\n\nexport interface DynamicDateControlModelConfig extends DynamicFormValueControlModelConfig<DynamicDateControlValue> {\n\n    format?: string;\n    max?: DynamicDateControlValue;\n    min?: DynamicDateControlValue;\n    placeholder?: string;\n}\n\nexport abstract class DynamicDateControlModel extends DynamicFormValueControlModel<DynamicDateControlValue> {\n\n    @serializable() format: string | null;\n    @serializable() max: DynamicDateControlValue | null;\n    @serializable() min: DynamicDateControlValue | null;\n    @serializable() placeholder: string | null;\n\n    protected constructor(config: DynamicDateControlModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.format = config.format ?? null;\n        this.max = config.max ?? null;\n        this.min = config.min ?? null;\n        this.placeholder = config.placeholder ?? null;\n    }\n}\n","import { DynamicFormValueControlModelConfig, DynamicFormValueControlModel } from \"./dynamic-form-value-control.model\";\nimport { DynamicFormControlLayout } from \"./misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../decorator/serializable.decorator\";\nimport { isBoolean } from \"../utils/core.utils\";\n\nexport interface DynamicFileControlModelConfig extends DynamicFormValueControlModelConfig<File | File[]> {\n\n    multiple?: boolean;\n}\n\nexport abstract class DynamicFileControlModel extends DynamicFormValueControlModel<File | File[]> {\n\n    @serializable() multiple: boolean;\n\n    protected constructor(config: DynamicFileControlModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.multiple = isBoolean(config.multiple) ? config.multiple : false;\n    }\n}\n","import { Observable, isObservable, of } from \"rxjs\";\nimport { map } from \"rxjs/operators\";\nimport { DynamicFormValueControlModel, DynamicFormValueControlModelConfig } from \"./dynamic-form-value-control.model\";\nimport { DynamicFormControlLayout } from \"./misc/dynamic-form-control-layout.model\";\nimport { serializable, serialize } from \"../decorator/serializable.decorator\";\nimport { isBoolean } from \"../utils/core.utils\";\n\nexport interface DynamicFormOptionConfig<T> {\n\n    disabled?: boolean;\n    label?: string;\n    value: T;\n}\n\nexport class DynamicFormOption<T> {\n\n    @serializable() disabled: boolean;\n    @serializable() label: string | null;\n    @serializable() value: T;\n\n    constructor(config: DynamicFormOptionConfig<T>) {\n\n        this.disabled = isBoolean(config.disabled) ? config.disabled : false;\n        this.label = config.label ?? null;\n        this.value = config.value;\n    }\n\n    get text() {\n        return this.label;\n    }\n\n    set text(text: string | null) {\n        this.label = text;\n    }\n\n    toJSON() {\n        return serialize(this);\n    }\n}\n\nexport interface DynamicOptionControlModelConfig<T> extends DynamicFormValueControlModelConfig<T | T[]> {\n\n    options?: DynamicFormOptionConfig<T>[] | Observable<DynamicFormOptionConfig<T>[]>;\n}\n\nexport abstract class DynamicOptionControlModel<T> extends DynamicFormValueControlModel<T | T[]> {\n\n    @serializable(\"options\") private _options: DynamicFormOption<T>[] = [];\n    options$: Observable<DynamicFormOption<T>[]>;\n\n    protected constructor(config: DynamicOptionControlModelConfig<T>, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.options = config.options;\n    }\n\n    private updateOptions$(): void {\n        this.options$ = of(this.options);\n    }\n\n    set options(options: any) {\n\n        if (Array.isArray(options)) {\n\n            this._options = (options as DynamicFormOptionConfig<T>[]).map(optionConfig => new DynamicFormOption<T>(optionConfig));\n\n            this.updateOptions$();\n\n        } else if (isObservable(options)) {\n\n            this.options$ = (options as Observable<DynamicFormOptionConfig<T>[]>).pipe(\n                map(optionsConfig => {\n\n                    this._options = optionsConfig.map(optionConfig => new DynamicFormOption<T>(optionConfig));\n\n                    return this._options;\n                }));\n\n        } else {\n\n            this.updateOptions$();\n        }\n    }\n\n    get options(): any {\n        return this._options;\n    }\n\n    add(optionConfig: DynamicFormOptionConfig<T>): DynamicFormOption<T> {\n        return this.insert(this.options.length, optionConfig);\n    }\n\n    get(index: number): DynamicFormOption<T> {\n        return this.options[index];\n    }\n\n    insert(index: number, optionConfig: DynamicFormOptionConfig<T>): DynamicFormOption<T> {\n\n        const option = new DynamicFormOption(optionConfig);\n\n        this.options.splice(index, 0, option);\n        this.updateOptions$();\n\n        return option;\n    }\n\n    remove(...indices: number[]): void {\n\n        indices.forEach(index => this.options.splice(index, 1));\n        this.updateOptions$();\n    }\n\n    abstract select(...indices: number[]): void;\n}\n","import { DynamicFormControlModel, DynamicFormControlModelConfig } from \"../dynamic-form-control.model\";\nimport { DynamicFormModel } from \"../dynamic-form.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_GROUP = \"GROUP\";\n\nexport interface DynamicFormGroupModelConfig extends DynamicFormControlModelConfig {\n\n    group?: DynamicFormModel;\n    legend?: string;\n}\n\nexport class DynamicFormGroupModel extends DynamicFormControlModel {\n\n    @serializable() group: DynamicFormModel = [];\n    @serializable() legend: string | null;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_GROUP;\n\n    constructor(config: DynamicFormGroupModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.group = Array.isArray(config.group) ? config.group : [];\n        this.legend = config.legend ?? null;\n    }\n\n    get(index: number): DynamicFormControlModel {\n        return this.group[index];\n    }\n\n    set(index: number, controlModel: DynamicFormControlModel,): void {\n        this.group[index] = controlModel;\n    }\n\n    add(controlModel: DynamicFormControlModel): void {\n        this.group.push(controlModel);\n    }\n\n    insert(index: number, controlModel: DynamicFormControlModel): void {\n        this.group.splice(index, 0, controlModel);\n    }\n\n    move(index: number, step: number): void {\n        this.group.splice(index + step, 0, ...this.group.splice(index, 1));\n    }\n\n    remove(index: number) {\n        this.group.splice(index, 1);\n    }\n\n    size(): number {\n        return this.group.length;\n    }\n}\n","import { DynamicFormGroupModel, DynamicFormGroupModelConfig } from \"../form-group/dynamic-form-group.model\";\nimport { DynamicCheckboxModel } from \"./dynamic-checkbox.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP = \"CHECKBOX_GROUP\";\n\nexport class DynamicCheckboxGroupModel extends DynamicFormGroupModel {\n\n    @serializable() group: DynamicCheckboxModel[];\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP;\n\n    constructor(config: DynamicFormGroupModelConfig, layout?: DynamicFormControlLayout) {\n        super(config, layout);\n    }\n\n    check(...indices: number[]): void {\n        indices.forEach(index => this.group[index].checked = true);\n    }\n\n    uncheck(...indices: number[]): void {\n        indices.forEach(index => this.group[index].checked = false);\n    }\n\n    checkAll(): void {\n        this.group.forEach(model => model.checked = true);\n    }\n\n    uncheckAll(): void {\n        this.group.forEach(model => model.checked = false);\n    }\n}\n","import { DynamicFormValueControlModelConfig, DynamicFormValueControlModel } from \"../dynamic-form-value-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\nimport { isBoolean, isString } from \"../../utils/core.utils\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_COLORPICKER = \"COLORPICKER\";\n\nexport interface DynamicColorPickerModelConfig extends DynamicFormValueControlModelConfig<string | object> {\n\n    format?: string;\n    inline?: boolean;\n}\n\nexport class DynamicColorPickerModel extends DynamicFormValueControlModel<string | object> {\n\n    @serializable() format: string | null;\n    @serializable() inline: boolean;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_COLORPICKER;\n\n    constructor(config: DynamicColorPickerModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.format = isString(config.format) ? config.format : null;\n        this.inline = isBoolean(config.inline) ? config.inline : false;\n    }\n}","import {\n    DynamicDateControlModel,\n    DynamicDateControlModelConfig,\n    DynamicDateControlValue\n} from \"../dynamic-date-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\nimport { isBoolean, isString } from \"../../utils/core.utils\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER = \"DATEPICKER\";\n\nexport interface DynamicDatePickerModelConfig extends DynamicDateControlModelConfig {\n\n    autoFocus?: boolean;\n    focusedDate?: DynamicDateControlValue;\n    inline?: boolean;\n    prefix?: string;\n    readOnly?: boolean;\n    suffix?: string;\n    toggleIcon?: string;\n    toggleLabel?: string;\n}\n\nexport class DynamicDatePickerModel extends DynamicDateControlModel {\n\n    @serializable() autoFocus: boolean;\n    @serializable() focusedDate: DynamicDateControlValue | null;\n    @serializable() inline: boolean;\n    @serializable() prefix: string | null;\n    @serializable() readOnly: boolean;\n    @serializable() suffix: string | null;\n    @serializable() toggleIcon: string | null;\n    @serializable() toggleLabel: string | null;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER;\n\n    constructor(config: DynamicDatePickerModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.autoFocus = isBoolean(config.autoFocus) ? config.autoFocus : false;\n        this.focusedDate = config.focusedDate ?? null;\n        this.inline = isBoolean(config.inline) ? config.inline : false;\n        this.prefix = config.prefix ?? null;\n        this.readOnly = isBoolean(config.readOnly) ? config.readOnly : false;\n        this.toggleIcon = isString(config.toggleIcon) ? config.toggleIcon : null;\n        this.toggleLabel = isString(config.toggleLabel) ? config.toggleLabel : null;\n        this.suffix = config.suffix ?? null;\n    }\n}\n","import { DynamicInputControlModel, DynamicInputControlModelConfig } from \"../dynamic-input-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_EDITOR = \"EDITOR\";\n\nexport interface DynamicEditorModelConfig extends DynamicInputControlModelConfig<string> {\n}\n\nexport class DynamicEditorModel extends DynamicInputControlModel<string> {\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_EDITOR;\n\n    constructor(config: DynamicEditorModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n    }\n}","import { DynamicFileControlModelConfig, DynamicFileControlModel } from \"../dynamic-file-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\nimport { isBoolean, isNumber } from \"../../utils/core.utils\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_FILE_UPLOAD = \"FILE_UPLOAD\";\n\nexport interface DynamicFileUploadModelConfig extends DynamicFileControlModelConfig {\n\n    accept?: string[];\n    autoUpload?: boolean;\n    maxSize?: number;\n    minSize?: number;\n    removeUrl?: string;\n    showFileList?: boolean;\n    url?: string;\n}\n\nexport class DynamicFileUploadModel extends DynamicFileControlModel {\n\n    @serializable() accept: string[] | null;\n    @serializable() autoUpload: boolean;\n    @serializable() maxSize: number | null;\n    @serializable() minSize: number | null;\n    @serializable() removeUrl: string | null;\n    @serializable() showFileList: boolean;\n    @serializable() url: string | null;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_FILE_UPLOAD;\n\n    constructor(config: DynamicFileUploadModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.accept = Array.isArray(config.accept) ? config.accept : null;\n        this.autoUpload = isBoolean(config.autoUpload) ? config.autoUpload : true;\n        this.maxSize = isNumber(config.maxSize) ? config.maxSize : null;\n        this.minSize = isNumber(config.minSize) ? config.minSize : null;\n        this.removeUrl = config.removeUrl ?? null;\n        this.showFileList = isBoolean(config.showFileList) ? config.showFileList : true;\n        this.url = config.url ?? null;\n    }\n}\n","import { DynamicOptionControlModel, DynamicOptionControlModelConfig } from \"../dynamic-option-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP = \"RADIO_GROUP\";\n\nexport interface DynamicRadioGroupModelConfig<T> extends DynamicOptionControlModelConfig<T> {\n\n    legend?: string;\n}\n\nexport class DynamicRadioGroupModel<T> extends DynamicOptionControlModel<T> {\n\n    @serializable() legend: string | null;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP;\n\n    constructor(config: DynamicRadioGroupModelConfig<T>, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.legend = config.legend ?? null;\n    }\n\n    select(index: number): void {\n        this.value = this.get(index).value;\n    }\n}\n","import { DynamicFormValueControlModelConfig, DynamicFormValueControlModel } from \"../dynamic-form-value-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\nimport { isNumber } from \"../../utils/core.utils\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_RATING = \"RATING\";\n\nexport interface DynamicRatingModelConfig extends DynamicFormValueControlModelConfig<number> {\n\n    max?: number;\n}\n\nexport class DynamicRatingModel extends DynamicFormValueControlModel<number> {\n\n    @serializable() max: number | null;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_RATING;\n\n    constructor(config: DynamicRatingModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.max = isNumber(config.max) ? config.max : 10;\n    }\n}","import { ɵlooseIdentical as looseIdentical } from \"@angular/core\";\nimport { DynamicOptionControlModel, DynamicOptionControlModelConfig } from \"../dynamic-option-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\nimport { isBoolean, isFunction } from \"../../utils/core.utils\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_SELECT = \"SELECT\";\n\nexport interface DynamicSelectModelConfig<T> extends DynamicOptionControlModelConfig<T> {\n\n    compareWithFn?: (o1: any, o2: any) => boolean;\n    filterable?: boolean;\n    multiple?: boolean;\n    placeholder?: string;\n    prefix?: string;\n    suffix?: string;\n}\n\nexport class DynamicSelectModel<T> extends DynamicOptionControlModel<T> {\n\n    compareWithFn: (value1: any, value2: any) => boolean;\n    @serializable() filterable: boolean;\n    @serializable() multiple: boolean;\n    @serializable() placeholder: string;\n    @serializable() prefix: string | null;\n    @serializable() suffix: string | null;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_SELECT;\n\n    constructor(config: DynamicSelectModelConfig<T>, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.compareWithFn = isFunction(config.compareWithFn) ? config.compareWithFn : looseIdentical;\n        this.filterable = isBoolean(config.filterable) ? config.filterable : false;\n        this.multiple = isBoolean(config.multiple) ? config.multiple : false;\n        this.placeholder = config.placeholder ?? \"\";\n        this.prefix = config.prefix ?? null;\n        this.suffix = config.suffix ?? null;\n    }\n\n    select(...indices: number[]): void {\n        this.value = this.multiple ? indices.map(index => this.get(index).value) : this.get(indices[0]).value;\n    }\n}\n","import { DynamicFormValueControlModelConfig, DynamicFormValueControlModel } from \"../dynamic-form-value-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\nimport { isBoolean, isNumber } from \"../../utils/core.utils\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_SLIDER = \"SLIDER\";\n\nexport interface DynamicSliderModelConfig extends DynamicFormValueControlModelConfig<number> {\n\n    max?: number;\n    min?: number;\n    step?: number;\n    vertical?: boolean;\n}\n\nexport class DynamicSliderModel extends DynamicFormValueControlModel<number> {\n\n    @serializable() max: number | null;\n    @serializable() min: number | null;\n    @serializable() step: number | null;\n    @serializable() vertical: boolean;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_SLIDER;\n\n    constructor(config: DynamicSliderModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.max = isNumber(config.max) ? config.max : 10;\n        this.min = isNumber(config.min) ? config.min : 0;\n        this.step = isNumber(config.step) ? config.step : 1;\n        this.vertical = isBoolean(config.vertical) ? config.vertical : false;\n    }\n}","import { DynamicCheckControlModel, DynamicCheckControlModelConfig } from \"../dynamic-check-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_SWITCH = \"SWITCH\";\n\nexport interface DynamicSwitchModelConfig extends DynamicCheckControlModelConfig {\n\n    offLabel?: string;\n    onLabel?: string;\n}\n\nexport class DynamicSwitchModel extends DynamicCheckControlModel {\n\n    @serializable() offLabel: string | null;\n    @serializable() onLabel: string | null;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_SWITCH;\n\n    constructor(config: DynamicSwitchModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.offLabel = config.offLabel ?? null;\n        this.onLabel = config.onLabel ?? null;\n    }\n}\n","import { DynamicInputControlModel, DynamicInputControlModelConfig } from \"../dynamic-input-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\nimport { isNumber } from \"../../utils/core.utils\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA = \"TEXTAREA\";\n\nexport const DYNAMIC_FORM_TEXTAREA_WRAP_HARD = \"hard\";\nexport const DYNAMIC_FORM_TEXTAREA_WRAP_SOFT = \"soft\";\n\nexport interface DynamicTextAreaModelConfig extends DynamicInputControlModelConfig<string> {\n\n    cols?: number;\n    rows?: number;\n    wrap?: string;\n}\n\nexport class DynamicTextAreaModel extends DynamicInputControlModel<string> {\n\n    @serializable() cols: number;\n    @serializable() rows: number;\n    @serializable() wrap: string;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA;\n\n    constructor(config: DynamicTextAreaModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.cols = isNumber(config.cols) ? config.cols : 20;\n        this.rows = isNumber(config.rows) ? config.rows : 2;\n        this.wrap = config.wrap ?? DYNAMIC_FORM_TEXTAREA_WRAP_SOFT;\n    }\n}\n","import { DynamicDateControlModel, DynamicDateControlModelConfig } from \"../dynamic-date-control.model\";\nimport { DynamicFormControlLayout } from \"../misc/dynamic-form-control-layout.model\";\nimport { serializable } from \"../../decorator/serializable.decorator\";\nimport { isBoolean } from \"../../utils/core.utils\";\n\nexport const DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER = \"TIMEPICKER\";\n\nexport interface DynamicTimePickerModelConfig extends DynamicDateControlModelConfig {\n\n    meridian?: boolean;\n    showSeconds?: boolean;\n}\n\nexport class DynamicTimePickerModel extends DynamicDateControlModel {\n\n    @serializable() meridian: boolean;\n    @serializable() showSeconds: boolean;\n\n    @serializable() readonly type: string = DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER;\n\n    constructor(config: DynamicTimePickerModelConfig, layout?: DynamicFormControlLayout) {\n\n        super(config, layout);\n\n        this.meridian = isBoolean(config.meridian) ? config.meridian : false;\n        this.showSeconds = isBoolean(config.showSeconds) ? config.showSeconds : false;\n    }\n}","import { InjectionToken } from \"@angular/core\";\nimport { AsyncValidatorFn, ValidatorFn } from \"@angular/forms\";\n\nexport type Validator = ValidatorFn | AsyncValidatorFn;\n\nexport type ValidatorFactory = (args: any) => Validator;\n\nexport type ValidatorsToken = Validator[];\n\nexport type ValidatorsMap = Map<string, Validator | ValidatorFactory>;\n\nexport const DYNAMIC_VALIDATORS = new InjectionToken<ValidatorsMap>(\"DYNAMIC_VALIDATORS\");\n","import { InjectionToken } from \"@angular/core\";\nimport { AbstractControl } from \"@angular/forms\";\nimport { DynamicFormControlModel } from \"../model/dynamic-form-control.model\";\nimport { DynamicFormHook } from \"../model/misc/dynamic-form-control-validation.model\";\n\nexport type DynamicErrorMessagesMatcher = (control: AbstractControl, model: DynamicFormControlModel, hasFocus: boolean) => boolean;\n\nexport const DEFAULT_ERROR_STATE_MATCHER: DynamicErrorMessagesMatcher =\n    (control: AbstractControl, model: DynamicFormControlModel, hasFocus: boolean) => {\n        return control.touched && !hasFocus;\n    };\n\nexport const CHANGE_ERROR_STATE_MATCHER: DynamicErrorMessagesMatcher =\n    (control: AbstractControl, model: DynamicFormControlModel, hasFocus: boolean) => {\n        return (model.updateOn === DynamicFormHook.Change || model.updateOn === null) ? control.dirty : control.touched && !hasFocus;\n    };\n\nexport const DYNAMIC_ERROR_MESSAGES_MATCHER = new InjectionToken<DynamicErrorMessagesMatcher>(\"DYNAMIC_ERROR_MESSAGES_MATCHER\");\n","import { Injectable, Inject, Optional } from \"@angular/core\";\nimport {\n    AbstractControl,\n    AsyncValidatorFn,\n    ValidatorFn,\n    Validators,\n    NG_VALIDATORS,\n    NG_ASYNC_VALIDATORS\n} from \"@angular/forms\";\nimport { DynamicFormControlModel } from \"../model/dynamic-form-control.model\";\nimport {\n    DynamicFormHook,\n    DynamicValidatorDescriptor,\n    DynamicValidatorsConfig\n} from \"../model/misc/dynamic-form-control-validation.model\";\nimport { isObject, isString } from \"../utils/core.utils\";\nimport { DYNAMIC_VALIDATORS, Validator, ValidatorFactory, ValidatorsToken } from \"./dynamic-form-validators\";\nimport {\n    DEFAULT_ERROR_STATE_MATCHER,\n    DYNAMIC_ERROR_MESSAGES_MATCHER,\n    DynamicErrorMessagesMatcher\n} from \"./dynamic-form-validation-matchers\";\n\n@Injectable({\n    providedIn: \"root\"\n})\nexport class DynamicFormValidationService {\n\n    constructor(@Optional() @Inject(NG_VALIDATORS) private _NG_VALIDATORS: ValidatorFn[],\n                @Optional() @Inject(NG_ASYNC_VALIDATORS) private _NG_ASYNC_VALIDATORS: AsyncValidatorFn[],\n                @Optional() @Inject(DYNAMIC_VALIDATORS) private _DYNAMIC_VALIDATORS: Map<string, Validator | ValidatorFactory>,\n                @Optional() @Inject(DYNAMIC_ERROR_MESSAGES_MATCHER) private _DYNAMIC_ERROR_MESSAGES_MATCHER: DynamicErrorMessagesMatcher) {\n    }\n\n    private getValidatorFn(validatorName: string, validatorArgs: any = null,\n                           validatorsToken: ValidatorsToken = this._NG_VALIDATORS): Validator | never {\n\n        let validatorFn: ValidatorFactory | Validator | undefined;\n\n        if (Validators.hasOwnProperty(validatorName)) { // Built-in Angular Validators\n\n            validatorFn = (Validators as any)[validatorName];\n\n        } else { // Custom Validators\n\n            if (this._DYNAMIC_VALIDATORS && this._DYNAMIC_VALIDATORS.has(validatorName)) {\n                validatorFn = this._DYNAMIC_VALIDATORS.get(validatorName);\n\n            } else if (validatorsToken) {\n                validatorFn = validatorsToken.find(validator => validator.name === validatorName);\n            }\n        }\n\n        if (validatorFn === undefined) { // throw when no validator could be resolved\n            throw new Error(\n                `validator \"${validatorName}\" is not provided via NG_VALIDATORS, NG_ASYNC_VALIDATORS or DYNAMIC_FORM_VALIDATORS`);\n        }\n\n        if (validatorArgs !== null) {\n            return (validatorFn as ValidatorFactory)(validatorArgs);\n        }\n\n        return validatorFn as Validator;\n    }\n\n    private getValidatorFns(validatorsConfig: DynamicValidatorsConfig,\n                            validatorsToken: ValidatorsToken = this._NG_VALIDATORS): Validator[] {\n\n        let validatorFns: Validator[] = [];\n\n        if (isObject(validatorsConfig)) {\n\n            validatorFns = Object.keys(validatorsConfig).map(validatorConfigKey => {\n\n                const validatorConfigValue = (validatorsConfig as DynamicValidatorsConfig)[validatorConfigKey];\n\n                if (this.isValidatorDescriptor(validatorConfigValue)) {\n\n                    const descriptor = validatorConfigValue as DynamicValidatorDescriptor;\n\n                    return this.getValidatorFn(descriptor.name, descriptor.args, validatorsToken);\n                }\n\n                return this.getValidatorFn(validatorConfigKey, validatorConfigValue, validatorsToken);\n            });\n        }\n\n        return validatorFns;\n    }\n\n    getValidator(validatorName: string, validatorArgs: any = null): ValidatorFn {\n        return this.getValidatorFn(validatorName, validatorArgs) as ValidatorFn;\n    }\n\n    getAsyncValidator(validatorName: string, validatorArgs: any = null): AsyncValidatorFn {\n        return this.getValidatorFn(validatorName, validatorArgs, this._NG_ASYNC_VALIDATORS) as AsyncValidatorFn;\n    }\n\n    getValidators(validatorsConfig: DynamicValidatorsConfig): ValidatorFn[] {\n        return this.getValidatorFns(validatorsConfig) as ValidatorFn[];\n    }\n\n    getAsyncValidators(asyncValidatorsConfig: DynamicValidatorsConfig): AsyncValidatorFn[] {\n        return this.getValidatorFns(asyncValidatorsConfig, this._NG_ASYNC_VALIDATORS) as AsyncValidatorFn[];\n    }\n\n    updateValidators(validatorsConfig: DynamicValidatorsConfig | null, control: AbstractControl,\n                     model: DynamicFormControlModel): void {\n\n        model.validators = validatorsConfig;\n\n        if (validatorsConfig === null) {\n\n            control.clearValidators();\n\n        } else {\n            control.setValidators(this.getValidators(validatorsConfig));\n        }\n\n        control.updateValueAndValidity();\n    }\n\n    updateAsyncValidators(asyncValidatorsConfig: DynamicValidatorsConfig | null, control: AbstractControl,\n                          model: DynamicFormControlModel): void {\n\n        model.asyncValidators = asyncValidatorsConfig;\n\n        if (asyncValidatorsConfig === null) {\n\n            control.clearAsyncValidators();\n\n        } else {\n            control.setAsyncValidators(this.getAsyncValidators(asyncValidatorsConfig));\n        }\n\n        control.updateValueAndValidity();\n    }\n\n    showErrorMessages(control: AbstractControl, model: DynamicFormControlModel, hasFocus: boolean): boolean {\n\n        const precondition = control.invalid && model.hasErrorMessages;\n        const matcher = this._DYNAMIC_ERROR_MESSAGES_MATCHER ? this._DYNAMIC_ERROR_MESSAGES_MATCHER(control, model, hasFocus) :\n            DEFAULT_ERROR_STATE_MATCHER(control, model, hasFocus);\n\n        return precondition && matcher;\n    }\n\n    parseErrorMessageConfig(template: string, model: DynamicFormControlModel, error: any = null): string {\n\n        return template.replace(/{{\\s*(.+?)\\s*}}/mg, (_match: string, expression: string) => {\n\n            let propertySource: any = model;\n            let propertyName: string = expression;\n\n            if (expression.indexOf(\"validator.\") >= 0 && error) {\n\n                propertySource = error;\n                propertyName = expression.replace(\"validator.\", \"\");\n            }\n\n            return propertySource[propertyName] !== null && propertySource[propertyName] !== undefined ?\n                propertySource[propertyName] : null;\n        });\n    }\n\n    createErrorMessages(control: AbstractControl, model: DynamicFormControlModel): string[] {\n\n        const messages: string[] = [];\n\n        if (model.hasErrorMessages) {\n\n            const messagesConfig = model.errorMessages as DynamicValidatorsConfig;\n\n            Object.keys(control.errors || {}).forEach(validationErrorKey => {\n\n                let messageKey = validationErrorKey;\n\n                if (validationErrorKey === \"minlength\" || validationErrorKey === \"maxlength\") {\n                    messageKey = messageKey.replace(\"length\", \"Length\");\n                }\n\n                if (messagesConfig.hasOwnProperty(messageKey)) {\n\n                    const validationError = control.getError(validationErrorKey);\n                    const messageTemplate = messagesConfig[messageKey] as string;\n\n                    messages.push(this.parseErrorMessageConfig(messageTemplate, model, validationError));\n                }\n            });\n        }\n\n        return messages;\n    }\n\n    isFormHook(value: any): boolean {\n        return isString(value) && (Object.values(DynamicFormHook) as string[]).includes(value);\n    }\n\n    isValidatorDescriptor(value: any): boolean {\n\n        if (isObject(value)) {\n            return value.hasOwnProperty(\"name\") && value.hasOwnProperty(\"args\");\n        }\n\n        return false;\n    }\n}\n","import { ComponentRef, Inject, Injectable, InjectionToken, Optional, Type } from \"@angular/core\";\nimport { DynamicFormControl } from \"../component/dynamic-form-control-interface\";\nimport { DynamicFormComponent } from \"../component/dynamic-form.component\";\nimport { DynamicFormControlModel } from \"../model/dynamic-form-control.model\";\nimport { isFunction, isNumber } from \"../utils/core.utils\";\n\nexport type DynamicFormControlRef = ComponentRef<DynamicFormControl>;\nexport type DynamicFormControlMapFn = (model: DynamicFormControlModel) => Type<DynamicFormControl> | null;\n\nexport const DYNAMIC_FORM_CONTROL_MAP_FN = new InjectionToken<DynamicFormControlMapFn>(\"DYNAMIC_FORM_CONTROL_MAP_FN\");\n\n@Injectable({\n    providedIn: \"root\"\n})\nexport class DynamicFormComponentService {\n\n    private forms: DynamicFormComponent[] = [];\n    private formControls: { [key: string]: DynamicFormControlRef | DynamicFormControlRef[] } = {};\n\n    constructor(@Inject(DYNAMIC_FORM_CONTROL_MAP_FN) @Optional() private readonly DYNAMIC_FORM_CONTROL_MAP_FN: any) {\n        this.DYNAMIC_FORM_CONTROL_MAP_FN = DYNAMIC_FORM_CONTROL_MAP_FN as DynamicFormControlMapFn;\n    }\n\n    getForms(): IterableIterator<DynamicFormComponent> {\n        return this.forms.values();\n    }\n\n    registerForm(component: DynamicFormComponent): void {\n        this.forms.push(component);\n    }\n\n    unregisterForm(component: DynamicFormComponent): void {\n\n        const indexOf = this.forms.indexOf(component);\n\n        if (indexOf !== -1) {\n            this.forms.splice(indexOf, 1);\n        }\n    }\n\n    getFormControlRef(modelId: string, index?: number): DynamicFormControlRef | undefined {\n\n        const ref: DynamicFormControlRef | DynamicFormControlRef[] = this.formControls[modelId];\n\n        if (isNumber(index)) {\n\n            return Array.isArray(ref) ? ref[index] : undefined;\n\n        } else {\n            return ref as DynamicFormControlRef;\n        }\n    }\n\n    registerFormControl(model: DynamicFormControlModel, ref: DynamicFormControlRef, index?: number): void {\n\n        if (isNumber(index)) { // threat model as array child\n\n            const arrayRef: DynamicFormControlRef[] = this.formControls[model.id] as DynamicFormControlRef[] || [];\n\n            if (Array.isArray(arrayRef)) {\n\n                arrayRef.splice(index, 0, ref);\n                this.formControls[model.id] = arrayRef;\n\n            } else {\n                console.warn(`registerFormControlRef is called with index for a non-array form control: ${model.id}`);\n            }\n\n        } else {\n            this.formControls[model.id] = ref;\n        }\n    }\n\n    unregisterFormControl(modelId: string, index?: number): void {\n\n        const componentRef = this.formControls[modelId];\n\n        if (isNumber(index)) {\n\n            if (Array.isArray(componentRef) && componentRef[index] !== undefined) {\n                componentRef.splice(index, 1);\n            }\n\n        } else if (componentRef !== undefined) {\n            delete this.formControls[modelId];\n        }\n    }\n\n    getCustomComponentType(model: DynamicFormControlModel): Type<DynamicFormControl> | null {\n        return isFunction(this.DYNAMIC_FORM_CONTROL_MAP_FN) ? this.DYNAMIC_FORM_CONTROL_MAP_FN(model) : null;\n    }\n}\n","import { Injectable } from \"@angular/core\";\nimport { AbstractControl, FormArray, FormControl, FormGroup } from \"@angular/forms\";\nimport { AbstractControlOptions } from \"@angular/forms\";\nimport { DynamicFormControlModel } from \"../model/dynamic-form-control.model\";\nimport { DynamicFormValueControlModel } from \"../model/dynamic-form-value-control.model\";\nimport {\n    DynamicFormArrayModel,\n    DYNAMIC_FORM_CONTROL_TYPE_ARRAY,\n    DynamicFormArrayGroupModel\n} from \"../model/form-array/dynamic-form-array.model\";\nimport { DYNAMIC_FORM_CONTROL_TYPE_GROUP, DynamicFormGroupModel } from \"../model/form-group/dynamic-form-group.model\";\nimport {\n    DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP,\n    DynamicCheckboxGroupModel\n} from \"../model/checkbox/dynamic-checkbox-group.model\";\nimport { DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX, DynamicCheckboxModel } from \"../model/checkbox/dynamic-checkbox.model\";\nimport {\n    DYNAMIC_FORM_CONTROL_TYPE_COLORPICKER,\n    DynamicColorPickerModel\n} from \"../model/colorpicker/dynamic-colorpicker.model\";\nimport {\n    DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER,\n    DynamicDatePickerModel\n} from \"../model/datepicker/dynamic-datepicker.model\";\nimport { DYNAMIC_FORM_CONTROL_TYPE_EDITOR, DynamicEditorModel } from \"../model/editor/dynamic-editor.model\";\nimport {\n    DYNAMIC_FORM_CONTROL_TYPE_FILE_UPLOAD,\n    DynamicFileUploadModel\n} from \"../model/file-upload/dynamic-file-upload.model\";\nimport { DYNAMIC_FORM_CONTROL_TYPE_INPUT, DynamicInputModel } from \"../model/input/dynamic-input.model\";\nimport {\n    DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP,\n    DynamicRadioGroupModel\n} from \"../model/radio/dynamic-radio-group.model\";\nimport { DYNAMIC_FORM_CONTROL_TYPE_RATING, DynamicRatingModel } from \"../model/rating/dynamic-rating.model\";\nimport { DYNAMIC_FORM_CONTROL_TYPE_SELECT, DynamicSelectModel } from \"../model/select/dynamic-select.model\";\nimport { DYNAMIC_FORM_CONTROL_TYPE_SLIDER, DynamicSliderModel } from \"../model/slider/dynamic-slider.model\";\nimport { DYNAMIC_FORM_CONTROL_TYPE_SWITCH, DynamicSwitchModel } from \"../model/switch/dynamic-switch.model\";\nimport { DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA, DynamicTextAreaModel } from \"../model/textarea/dynamic-textarea.model\";\nimport {\n    DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER,\n    DynamicTimePickerModel\n} from \"../model/timepicker/dynamic-timepicker.model\";\nimport { DynamicFormValidationService } from \"./dynamic-form-validation.service\";\nimport { DynamicFormModel, DynamicUnionFormModel } from \"../model/dynamic-form.model\";\nimport { DynamicPathable } from \"../model/misc/dynamic-form-control-path.model\";\nimport { DynamicFormHook, DynamicValidatorsConfig } from \"../model/misc/dynamic-form-control-validation.model\";\nimport { maskFromString, parseReviver } from \"../utils/json.utils\";\nimport { isString } from \"../utils/core.utils\";\nimport { DynamicFormComponent } from \"../component/dynamic-form.component\";\nimport { DynamicFormComponentService } from \"./dynamic-form-component.service\";\n\n@Injectable({\n    providedIn: \"root\"\n})\nexport class DynamicFormService {\n\n    constructor(private componentService: DynamicFormComponentService,\n                private validationService: DynamicFormValidationService) {\n    }\n\n    private createAbstractControlOptions(validatorsConfig: DynamicValidatorsConfig | null = null,\n                                         asyncValidatorsConfig: DynamicValidatorsConfig | null = null,\n                                         updateOn: DynamicFormHook | null = null): AbstractControlOptions {\n\n        return {\n            asyncValidators: asyncValidatorsConfig !== null ? this.validationService.getAsyncValidators(asyncValidatorsConfig) : null,\n            validators: validatorsConfig !== null ? this.validationService.getValidators(validatorsConfig) : null,\n            updateOn: updateOn !== null && this.validationService.isFormHook(updateOn) ? updateOn : DynamicFormHook.Change\n        };\n    }\n\n    createFormArray(formArrayModel: DynamicFormArrayModel): FormArray {\n\n        const controls: AbstractControl[] = [];\n        const options = this.createAbstractControlOptions(formArrayModel.validators, formArrayModel.asyncValidators,\n            formArrayModel.updateOn);\n\n        for (let index = 0; index < formArrayModel.size; index++) {\n\n            const groupModel = formArrayModel.get(index);\n            const groupOptions = this.createAbstractControlOptions(formArrayModel.groupValidators,\n                formArrayModel.groupAsyncValidators, formArrayModel.updateOn);\n\n            controls.push(this.createFormGroup(groupModel.group, groupOptions, groupModel));\n        }\n\n        return new FormArray(controls, options);\n    }\n\n    createFormGroup(formModel: DynamicFormModel, options: AbstractControlOptions | null = null,\n                    parent: DynamicPathable | null = null): FormGroup {\n\n        const controls: { [controlId: string]: AbstractControl; } = {};\n\n        formModel.forEach(model => {\n\n            model.parent = parent;\n\n            switch (model.type) {\n\n                case DYNAMIC_FORM_CONTROL_TYPE_ARRAY:\n\n                    controls[model.id] = this.createFormArray(model as DynamicFormArrayModel);\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_GROUP:\n                case DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP:\n\n                    const groupModel = model as DynamicFormGroupModel;\n                    const groupOptions = this.createAbstractControlOptions(groupModel.validators,\n                        groupModel.asyncValidators, groupModel.updateOn);\n\n                    controls[model.id] = this.createFormGroup(groupModel.group, groupOptions, groupModel);\n                    break;\n\n                default:\n\n                    const controlModel = model as DynamicFormValueControlModel<any>;\n                    const controlState = {value: controlModel.value, disabled: controlModel.disabled};\n                    const controlOptions = this.createAbstractControlOptions(controlModel.validators,\n                        controlModel.asyncValidators, controlModel.updateOn);\n\n                    controls[model.id] = new FormControl(controlState, controlOptions);\n            }\n        });\n\n        return new FormGroup(controls, options);\n    }\n\n    getPathSegment(model: DynamicPathable): string {\n        return model instanceof DynamicFormArrayGroupModel ? model.index.toString() : (model as DynamicFormControlModel).id;\n    }\n\n    getPath(model: DynamicPathable, join: boolean = false): string[] | string {\n\n        const path = [this.getPathSegment(model)];\n        let parent = model.parent;\n\n        while (parent) {\n\n            path.unshift(this.getPathSegment(parent));\n            parent = parent.parent;\n        }\n\n        return join ? path.join(\".\") : path;\n    }\n\n    addFormGroupControl(formGroup: FormGroup, formModel: DynamicUnionFormModel, ...models: DynamicFormModel): void {\n\n        if (formModel instanceof DynamicFormGroupModel) {\n\n            this.insertFormGroupControl(formModel.size(), formGroup, formModel, ...models);\n\n        } else {\n\n            const model = formModel as DynamicFormModel;\n            this.insertFormGroupControl(model.length, formGroup, model, ...models);\n        }\n    }\n\n    moveFormGroupControl(index: number, step: number, formModel: DynamicUnionFormModel): void {\n\n        if (formModel instanceof DynamicFormGroupModel) {\n\n            formModel.move(index, step);\n\n        } else {\n\n            const model = formModel as DynamicFormModel;\n            model.splice(index + step, 0, ...model.splice(index, 1));\n        }\n    }\n\n    insertFormGroupControl(index: number, formGroup: FormGroup, formModel: DynamicUnionFormModel,\n                           ...models: DynamicFormModel): void {\n\n        const parent = formModel instanceof DynamicFormGroupModel ? formModel : null;\n        const controls = this.createFormGroup(models, null, parent).controls;\n\n        Object.keys(controls).forEach((controlName, idx) => {\n\n            const controlModel = models[idx];\n\n            if (formModel instanceof DynamicFormGroupModel) {\n                formModel.insert(index, controlModel);\n\n            } else {\n                (formModel as DynamicFormModel).splice(index, 0, controlModel);\n            }\n\n            formGroup.addControl(controlName, controls[controlName]);\n        });\n    }\n\n    removeFormGroupControl(index: number, formGroup: FormGroup, formModel: DynamicUnionFormModel): void {\n\n        if (formModel instanceof DynamicFormGroupModel) {\n\n            formGroup.removeControl(formModel.get(index).id);\n            formModel.remove(index);\n\n        } else {\n\n            formGroup.removeControl(formModel[index].id);\n            (formModel as DynamicFormModel).splice(index, 1);\n        }\n    }\n\n    addFormArrayGroup(formArray: FormArray, formArrayModel: DynamicFormArrayModel): void {\n\n        const groupModel = formArrayModel.addGroup();\n\n        formArray.push(this.createFormGroup(groupModel.group, null, groupModel));\n    }\n\n    insertFormArrayGroup(index: number, formArray: FormArray, formArrayModel: DynamicFormArrayModel): void {\n\n        const groupModel = formArrayModel.insertGroup(index);\n\n        formArray.insert(index, this.createFormGroup(groupModel.group, null, groupModel));\n    }\n\n    moveFormArrayGroup(index: number, step: number, formArray: FormArray, formArrayModel: DynamicFormArrayModel): void {\n\n        const newIndex = index + step;\n        const moveUp = step >= 0;\n\n        if ((index >= 0 && index < formArrayModel.size) && (newIndex >= 0 && newIndex < formArrayModel.size)) {\n\n            const movingGroups: AbstractControl[] = [];\n\n            for (let i = moveUp ? index : newIndex; i <= (moveUp ? newIndex : index); i++) {\n                movingGroups.push(formArray.at(i));\n            }\n\n            movingGroups.forEach((formControl, idx) => {\n\n                let position;\n\n                if (moveUp) {\n                    position = idx === 0 ? newIndex : index + idx - 1;\n\n                } else {\n                    position = idx === movingGroups.length - 1 ? newIndex : newIndex + idx + 1;\n                }\n\n                formArray.setControl(position, formControl);\n            });\n\n            formArrayModel.moveGroup(index, step);\n\n        } else {\n            throw new Error(`form array group cannot be moved due to index or new index being out of bounds`);\n        }\n    }\n\n    removeFormArrayGroup(index: number, formArray: FormArray, formArrayModel: DynamicFormArrayModel): void {\n\n        formArray.removeAt(index);\n        formArrayModel.removeGroup(index);\n    }\n\n    clearFormArray(formArray: FormArray, formArrayModel: DynamicFormArrayModel): void {\n\n        formArray.clear();\n        formArrayModel.clear();\n    }\n\n    findById(id: string, formModel: DynamicFormModel): DynamicFormControlModel | null {\n\n        let result = null;\n\n        const findByIdFn = (modelId: string, groupModel: DynamicFormModel): void => {\n\n            for (const controlModel of groupModel) {\n\n                if (controlModel.id === modelId) {\n                    result = controlModel;\n                    break;\n                }\n\n                if (controlModel instanceof DynamicFormGroupModel) {\n                    findByIdFn(modelId, (controlModel as DynamicFormGroupModel).group);\n                }\n            }\n        };\n\n        findByIdFn(id, formModel);\n\n        return result;\n    }\n\n    findModelById<T extends DynamicFormControlModel>(id: string, formModel: DynamicFormModel): T | null {\n        return this.findById(id, formModel) as T;\n    }\n\n    findControlByModel<T extends AbstractControl>(model: DynamicFormControlModel, group: FormGroup): T | null {\n        return group.root.get(this.getPath(model, true)) as T;\n    }\n\n    detectChanges(formComponent?: DynamicFormComponent): void {\n\n        if (formComponent instanceof DynamicFormComponent) {\n\n            formComponent.markForCheck();\n            formComponent.detectChanges();\n\n        } else {\n\n            for (const form of this.componentService.getForms()) {\n                form.markForCheck();\n                form.detectChanges();\n            }\n        }\n    }\n\n    fromJSON(json: string | object[]): DynamicFormModel | never {\n\n        const formModelJSON = isString(json) ? JSON.parse(json, parseReviver) : json;\n        const formModel: DynamicFormModel = [];\n\n        formModelJSON.forEach((model: any) => {\n\n            const layout = model.layout ?? null;\n\n            switch (model.type) {\n\n                case DYNAMIC_FORM_CONTROL_TYPE_ARRAY:\n                    const formArrayModel = model as DynamicFormArrayModel;\n\n                    if (Array.isArray(formArrayModel.groups)) {\n\n                        formArrayModel.groups.forEach((groupModel: DynamicFormArrayGroupModel) => {\n                            groupModel.group = this.fromJSON(groupModel.group) as DynamicFormModel;\n                        });\n                    }\n\n                    formArrayModel.groupFactory = () => {\n                        return this.fromJSON(formArrayModel.groupPrototype);\n                    };\n\n                    formModel.push(new DynamicFormArrayModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX:\n                    formModel.push(new DynamicCheckboxModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_CHECKBOX_GROUP:\n                    model.group = this.fromJSON(model.group) as DynamicCheckboxModel[];\n                    formModel.push(new DynamicCheckboxGroupModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_COLORPICKER:\n                    formModel.push(new DynamicColorPickerModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_DATEPICKER:\n                    formModel.push(new DynamicDatePickerModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_EDITOR:\n                    formModel.push(new DynamicEditorModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_FILE_UPLOAD:\n                    model.value = null;\n                    formModel.push(new DynamicFileUploadModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_GROUP:\n                    model.group = this.fromJSON(model.group);\n                    formModel.push(new DynamicFormGroupModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_INPUT:\n                    const inputModel = model as DynamicInputModel;\n\n                    if (inputModel.mask !== null) {\n                        if (!(inputModel.mask instanceof Function)) {\n                            inputModel.mask = maskFromString(inputModel.mask as string);\n                        }\n                    }\n\n                    formModel.push(new DynamicInputModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_RADIO_GROUP:\n                    formModel.push(new DynamicRadioGroupModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_RATING:\n                    formModel.push(new DynamicRatingModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_SELECT:\n                    formModel.push(new DynamicSelectModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_SLIDER:\n                    formModel.push(new DynamicSliderModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_SWITCH:\n                    formModel.push(new DynamicSwitchModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_TEXTAREA:\n                    formModel.push(new DynamicTextAreaModel(model, layout));\n                    break;\n\n                case DYNAMIC_FORM_CONTROL_TYPE_TIMEPICKER:\n                    formModel.push(new DynamicTimePickerModel(model, layout));\n                    break;\n\n                default:\n                    throw new Error(`unknown form control model type defined on JSON object with id \"${model.id}\"`);\n            }\n        });\n\n        return formModel;\n    }\n}\n","import { InjectionToken, Injector, ValueProvider } from \"@angular/core\";\nimport { FormControl } from \"@angular/forms\";\nimport { DynamicFormControlModel } from \"../model/dynamic-form-control.model\";\nimport { DynamicFormValidationService } from \"./dynamic-form-validation.service\";\nimport { isObject } from \"../utils/core.utils\";\nimport { DynamicValidatorsConfig } from \"../model/misc/dynamic-form-control-validation.model\";\nimport { DynamicFormService } from \"./dynamic-form.service\";\n\nexport const MATCH_DISABLED = \"DISABLED\";\nexport const MATCH_ENABLED = \"ENABLED\";\nexport const MATCH_HIDDEN = \"HIDDEN\";\nexport const MATCH_OPTIONAL = \"OPTIONAL\";\nexport const MATCH_REQUIRED = \"REQUIRED\";\nexport const MATCH_VISIBLE = \"VISIBLE\";\n\nexport const AND_OPERATOR = \"AND\";\nexport const OR_OPERATOR = \"OR\";\n\nexport interface DynamicFormControlMatcher {\n\n    match: string;\n    opposingMatch: string | null;\n\n    onChange(hasMatch: boolean, model: DynamicFormControlModel, control: FormControl, injector: Injector): void;\n}\n\nexport const DYNAMIC_MATCHERS = new InjectionToken<DynamicFormControlMatcher>(\"DYNAMIC_MATCHERS\");\n\nexport const DISABLED_MATCHER: DynamicFormControlMatcher = {\n\n    match: MATCH_DISABLED,\n    opposingMatch: MATCH_ENABLED,\n    onChange(hasMatch, model) {\n        model.disabled = hasMatch;\n    }\n};\n\nexport const HIDDEN_MATCHER: DynamicFormControlMatcher = {\n\n    match: MATCH_HIDDEN,\n    opposingMatch: MATCH_VISIBLE,\n    onChange(hasMatch, model) {\n        model.hidden = hasMatch;\n    }\n};\n\nexport const REQUIRED_MATCHER: DynamicFormControlMatcher = {\n\n    match: MATCH_REQUIRED,\n    opposingMatch: MATCH_OPTIONAL,\n    onChange(hasMatch, model, control, injector) {\n\n        let validatorsConfig = null;\n\n        if (hasMatch) {\n\n            validatorsConfig = isObject(model.validators) ? {...model.validators, required: null} : {required: null};\n\n        } else {\n\n            if (isObject(model.validators)) {\n\n                delete (model.validators as Pick<DynamicValidatorsConfig, \"required\">).required;\n                validatorsConfig = {...model.validators};\n            }\n        }\n\n        injector.get(DynamicFormValidationService).updateValidators(validatorsConfig, control, model);\n        injector.get(DynamicFormService).detectChanges();\n    }\n};\n\nexport const DISABLED_MATCHER_PROVIDER: ValueProvider = {\n    provide: DYNAMIC_MATCHERS,\n    useValue: DISABLED_MATCHER,\n    multi: true\n};\n\nexport const HIDDEN_MATCHER_PROVIDER: ValueProvider = {\n    provide: DYNAMIC_MATCHERS,\n    useValue: HIDDEN_MATCHER,\n    multi: true\n};\n\nexport const REQUIRED_MATCHER_PROVIDER: ValueProvider = {\n    provide: DYNAMIC_MATCHERS,\n    useValue: REQUIRED_MATCHER,\n    multi: true\n};\n\nexport const DYNAMIC_MATCHER_PROVIDERS = [DISABLED_MATCHER_PROVIDER, HIDDEN_MATCHER_PROVIDER, REQUIRED_MATCHER_PROVIDER];\n","import { Injectable, QueryList } from \"@angular/core\";\nimport {\n    DynamicFormControlLayout,\n    DynamicFormControlLayoutConfig,\n    DynamicFormControlLayoutContext,\n    DynamicFormControlLayoutPlace\n} from \"../model/misc/dynamic-form-control-layout.model\";\nimport { DynamicFormControlModel } from \"../model/dynamic-form-control.model\";\nimport { DynamicFormArrayGroupModel } from \"../model/form-array/dynamic-form-array.model\";\nimport {\n    DynamicTemplateDirective,\n    DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT\n} from \"../directive/dynamic-template.directive\";\nimport { isObject, isString } from \"../utils/core.utils\";\n\nexport type DynamicFormLayout = { [id: string]: DynamicFormControlLayout };\n\nexport type DynamicFormControlTemplates = QueryList<DynamicTemplateDirective> | DynamicTemplateDirective[] | undefined;\n\n@Injectable({\n    providedIn: \"root\"\n})\nexport class DynamicFormLayoutService {\n\n    findById(id: string, formLayout: DynamicFormLayout | null): DynamicFormControlLayout | null {\n\n        if (isObject(formLayout)) {\n\n            for (const key of Object.keys(formLayout)) {\n\n                if (key === id) {\n                    return formLayout[key];\n                }\n            }\n        }\n\n        return null;\n    }\n\n    findByModel(model: DynamicFormControlModel, formLayout: DynamicFormLayout | null): DynamicFormControlLayout | null {\n\n        let controlLayout: DynamicFormControlLayout = null;\n\n        if (isObject(formLayout)) {\n\n            for (const key of Object.keys(formLayout)) {\n\n                key.split(\",\").forEach(substring => {\n\n                    const selector = substring.trim();\n\n                    if (selector === model.id || selector === model.type) {\n                        controlLayout = formLayout[key];\n                    }\n                });\n            }\n        }\n\n        return controlLayout;\n    }\n\n    filterTemplatesByModel(model: DynamicFormControlModel, templates: DynamicFormControlTemplates): DynamicTemplateDirective[] {\n\n        const filterCallback: (template: DynamicTemplateDirective) => boolean = (template: DynamicTemplateDirective) => {\n            return template.modelId === model.id || template.modelType === model.type;\n        };\n\n        if (templates instanceof QueryList) {\n            return templates.filter(filterCallback);\n\n        } else if (Array.isArray(templates)) {\n            return templates.filter(filterCallback);\n        }\n\n        return [];\n    }\n\n    getAlignedTemplate(model: DynamicFormControlModel, templates: DynamicFormControlTemplates,\n                       alignment: DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT): DynamicTemplateDirective | undefined {\n\n        return this.filterTemplatesByModel(model, templates)\n            .find(template => template.as === null && template.align === alignment);\n    }\n\n    /*\n    getIndexedTemplates(model: DynamicFormControlModel, templates: DynamicFormControlTemplates): DynamicTemplateDirective[] | undefined {\n        return this.filterTemplatesByModel(model, templates).filter(template => template.as === null);\n    }\n    */\n    getStartTemplate(model: DynamicFormControlModel, templates: DynamicFormControlTemplates): DynamicTemplateDirective | undefined {\n        return this.getAlignedTemplate(model, templates, DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT.Start);\n    }\n\n    getEndTemplate(model: DynamicFormControlModel, templates: DynamicFormControlTemplates): DynamicTemplateDirective | undefined {\n        return this.getAlignedTemplate(model, templates, DYNAMIC_TEMPLATE_DIRECTIVE_ALIGNMENT.End);\n    }\n\n    getClass(layout: DynamicFormControlLayout | null | undefined, context: DynamicFormControlLayoutContext,\n             place: DynamicFormControlLayoutPlace): string {\n\n        if (isObject(layout) && layout.hasOwnProperty(context)) {\n\n            const config = layout[context] as DynamicFormControlLayoutConfig;\n\n            if (config.hasOwnProperty(place)) {\n                return config[place] as string;\n            }\n        }\n\n        return \"\";\n    }\n\n    getHostClass(layout: DynamicFormControlLayout | null | undefined): string {\n\n        const keys: (keyof DynamicFormControlLayout)[] = [\"element\", \"grid\"];\n        let cls = \"\";\n\n        if (isObject(layout)) {\n            keys.forEach(key => {\n                if (isObject(layout[key]) && isString(layout[key].host)) {\n                    cls = cls + ` ${layout[key].host}`;\n                }\n            });\n        }\n\n        return cls;\n    }\n\n    getElementId(model: DynamicFormControlModel): string {\n\n        let id = model.id;\n        let parent = model.parent;\n\n        while (parent !== null) {\n\n            if (parent instanceof DynamicFormArrayGroupModel) {\n\n                id = `${parent.context.id}-${parent.index}-${model.id}`;\n                break;\n            }\n\n            parent = parent.parent;\n        }\n\n        return id;\n    }\n}\n","import { Inject, Injectable, Injector, Optional } from \"@angular/core\";\nimport { FormControl, FormGroup } from \"@angular/forms\";\nimport { DynamicFormControlModel } from \"../model/dynamic-form-control.model\";\nimport {\n    AND_OPERATOR,\n    DYNAMIC_MATCHERS,\n    DynamicFormControlMatcher,\n    OR_OPERATOR\n} from \"./dynamic-form-relation-matchers\";\nimport { DynamicFormControlRelation } from \"../model/misc/dynamic-form-control-relation.model\";\nimport { startWith } from \"rxjs/operators\";\nimport { merge, Subscription } from \"rxjs\";\n\nexport type DynamicRelatedFormControls = { [key: string]: FormControl };\n\n@Injectable({\n    providedIn: \"root\"\n})\nexport class DynamicFormRelationService {\n\n    constructor(@Optional() @Inject(DYNAMIC_MATCHERS) private MATCHERS: DynamicFormControlMatcher[],\n                private injector: Injector) {\n    }\n\n    getRelatedFormControls(model: DynamicFormControlModel, group: FormGroup): DynamicRelatedFormControls {\n\n        const conditionReducer = (controls, condition) => {\n\n            const path = condition.rootPath ?? condition.id;\n\n            if (!controls.hasOwnProperty(path)) {\n\n                const control = condition.rootPath ? group.root.get(condition.rootPath) : group.get(condition.id);\n\n                control instanceof FormControl ? controls[path] = control : console.warn(`No related form control with id ${condition.id} could be found`);\n            }\n\n            return controls;\n        };\n\n        const relationReducer = (controls, relation) => relation.when.reduce(conditionReducer, controls);\n\n        return model.relations.reduce(relationReducer, {});\n    }\n\n    findRelationByMatcher(relations: DynamicFormControlRelation[], matcher: DynamicFormControlMatcher): DynamicFormControlRelation | undefined {\n        return relations.find(relation => [matcher.match, matcher.opposingMatch].includes(relation.match));\n    }\n\n    matchesCondition(relation: DynamicFormControlRelation, relatedFormControls: DynamicRelatedFormControls, matcher: DynamicFormControlMatcher): boolean {\n\n        const operator = relation.operator ?? OR_OPERATOR;\n\n        return relation.when.reduce((hasAlreadyMatched, condition, index) => {\n\n            const path = condition.rootPath ?? condition.id;\n\n            let relatedFormControl;\n\n            for (const [key, control] of Object.entries(relatedFormControls)) {\n                if (key === path) {\n                    relatedFormControl = control;\n                    break;\n                }\n            }\n\n            if (relatedFormControl && relation.match === matcher.match) {\n\n                if (index > 0 && operator === AND_OPERATOR && !hasAlreadyMatched) {\n                    return false;\n                }\n\n                if (index > 0 && operator === OR_OPERATOR && hasAlreadyMatched) {\n                    return true;\n                }\n\n                return condition.value === relatedFormControl.value || condition.status === relatedFormControl.status;\n            }\n\n            if (relatedFormControl && relation.match === matcher.opposingMatch) {\n\n                if (index > 0 && operator === AND_OPERATOR && hasAlreadyMatched) {\n                    return true;\n                }\n\n                if (index > 0 && operator === OR_OPERATOR && !hasAlreadyMatched) {\n                    return false;\n                }\n\n                return !(condition.value === relatedFormControl.value || condition.status === relatedFormControl.status);\n            }\n\n            return false;\n\n        }, false);\n    }\n\n    subscribeRelations(model: DynamicFormControlModel, group: FormGroup, control: FormControl): Subscription[] {\n\n        const relatedFormControls = this.getRelatedFormControls(model, group);\n        const subscriptions: Subscription[] = [];\n\n        Object.values(relatedFormControls).forEach(relatedControl => {\n\n            const valueChanges = relatedControl.valueChanges.pipe(startWith(relatedControl.value));\n            const statusChanges = relatedControl.statusChanges.pipe(startWith(relatedControl.status));\n\n            subscriptions.push(merge(valueChanges, statusChanges).subscribe(() => {\n\n                this.MATCHERS.forEach(matcher => {\n\n                    const relation = this.findRelationByMatcher(model.relations, matcher);\n\n                    if (relation !== undefined) {\n\n                        const hasMatch = this.matchesCondition(relation, relatedFormControls, matcher);\n                        matcher.onChange(hasMatch, model, control, this.injector);\n                    }\n                });\n            }));\n        });\n\n        return subscriptions;\n    }\n}\n","export const AUTOCOMPLETE_OFF = \"off\";\nexport const AUTOCOMPLETE_ON = \"on\";\n\nexport const AUTOFILL_TOKEN_BILLING = \"billing\";\nexport const AUTOFILL_TOKEN_SHIPPING = \"shipping\";\n\nexport const AUTOFILL_TOKENS_ADDRESS = [AUTOFILL_TOKEN_BILLING, AUTOFILL_TOKEN_SHIPPING];\n\nexport const AUTOFILL_TOKEN_HOME = \"home\";\nexport const AUTOFILL_TOKEN_WORK = \"work\";\nexport const AUTOFILL_TOKEN_MOBILE = \"mobile\";\nexport const AUTOFILL_TOKEN_FAX = \"fax\";\nexport const AUTOFILL_TOKEN_PAGER = \"pager\";\n\nexport const AUTOFILL_TOKENS_CONTACT = [\n    AUTOFILL_TOKEN_FAX, AUTOFILL_TOKEN_HOME, AUTOFILL_TOKEN_MOBILE, AUTOFILL_TOKEN_PAGER, AUTOFILL_TOKEN_WORK\n];\n\nexport const AUTOFILL_FIELD_STREET_ADDRESS = \"street-address\";\nexport const AUTOFILL_FIELD_ADDRESS_LINE_1 = \"address-line1\";\nexport const AUTOFILL_FIELD_ADDRESS_LINE_2 = \"address-line2\";\nexport const AUTOFILL_FIELD_ADDRESS_LINE_3 = \"address-line3\";\nexport const AUTOFILL_FIELD_ADDRESS_LEVEL_4 = \"address-level4\";\nexport const AUTOFILL_FIELD_ADDRESS_LEVEL_3 = \"address-level3\";\nexport const AUTOFILL_FIELD_ADDRESS_LEVEL_2 = \"address-level2\";\nexport const AUTOFILL_FIELD_ADDRESS_LEVEL_1 = \"address-level1\";\n\nexport const AUTOFILL_FIELD_NAME = \"name\";\nexport const AUTOFILL_FIELD_HONORIFIC_PREFIX = \"honorific-prefix\";\nexport const AUTOFILL_FIELD_GIVEN_NAME = \"given-name\";\nexport const AUTOFILL_FIELD_ADDITIONAL_NAME = \"additional-name\";\nexport const AUTOFILL_FIELD_FAMILY_NAME = \"family-name\";\nexport const AUTOFILL_FIELD_HONORIFIC_SUFFIX = \"honorific-suffix\";\nexport const AUTOFILL_FIELD_NICKNAME = \"nickname\";\nexport const AUTOFILL_FIELD_USERNAME = \"username\";\n\nexport const AUTOFILL_FIELD_NEW_PASSWORD = \"new-password\";\nexport const AUTOFILL_FIELD_CURRENT_PASSWORD = \"current-password\";\n\nexport const AUTOFILL_FIELD_ORGANIZATION_TITLE = \"organization-title\";\nexport const AUTOFILL_FIELD_ORGANIZATION = \"organization\";\n\nexport const AUTOFILL_FIELD_COUNTRY = \"country\";\nexport const AUTOFILL_FIELD_COUNTRY_NAME = \"country-name\";\nexport const AUTOFILL_FIELD_POSTAL_CODE = \"postal-code\";\n\nexport const AUTOFILL_FIELD_CC_NAME = \"cc-name\";\nexport const AUTOFILL_FIELD_CC_GIVEN_NAME = \"cc-given-name\";\nexport const AUTOFILL_FIELD_CC_ADDITIONAL_NAME = \"cc-additional-name\";\nexport const AUTOFILL_FIELD_CC_FAMILY_NAME = \"cc-family-name\";\nexport const AUTOFILL_FIELD_CC_NUMBER = \"cc-number\";\nexport const AUTOFILL_FIELD_CC_EXP = \"cc-exp\";\nexport const AUTOFILL_FIELD_CC_EXP_MONTH = \"cc-exp-month\";\nexport const AUTOFILL_FIELD_CC_EXP_YEAR = \"cc-exp-year\";\nexport const AUTOFILL_FIELD_CC_CSC = \"cc-csc\";\nexport const AUTOFILL_FIELD_CC_TYPE = \"cc-type\";\n\nexport const AUTOFILL_FIELD_TRANSACTION_CURRENCY = \"transaction-currency\";\nexport const AUTOFILL_FIELD_TRANSACTION_AMOUNT = \"transaction-amount\";\n\nexport const AUTOFILL_FIELD_LANGUAGE = \"language\";\n\nexport const AUTOFILL_FIELD_BDAY = \"bday\";\nexport const AUTOFILL_FIELD_BDAY_DAY = \"bday-day\";\nexport const AUTOFILL_FIELD_BDAY_MONTH = \"bday-month\";\nexport const AUTOFILL_FIELD_BDAY_YEAR = \"bday-year\";\n\nexport const AUTOFILL_FIELD_SEX = \"sex\";\n\nexport const AUTOFILL_FIELD_URL = \"url\";\n\nexport const AUTOFILL_FIELD_PHOTO = \"photo\";\n\nexport const AUTOFILL_FIELDS = [\n    AUTOFILL_FIELD_STREET_ADDRESS, AUTOFILL_FIELD_ADDRESS_LINE_1, AUTOFILL_FIELD_ADDRESS_LINE_2,\n    AUTOFILL_FIELD_ADDRESS_LINE_3, AUTOFILL_FIELD_ADDRESS_LEVEL_4, AUTOFILL_FIELD_ADDRESS_LEVEL_3,\n    AUTOFILL_FIELD_ADDRESS_LEVEL_2, AUTOFILL_FIELD_ADDRESS_LEVEL_1, AUTOFILL_FIELD_NAME,\n    AUTOFILL_FIELD_HONORIFIC_PREFIX, AUTOFILL_FIELD_GIVEN_NAME, AUTOFILL_FIELD_ADDITIONAL_NAME,\n    AUTOFILL_FIELD_FAMILY_NAME, AUTOFILL_FIELD_HONORIFIC_SUFFIX, AUTOFILL_FIELD_NICKNAME, AUTOFILL_FIELD_USERNAME,\n    AUTOFILL_FIELD_NEW_PASSWORD, AUTOFILL_FIELD_CURRENT_PASSWORD, AUTOFILL_FIELD_ORGANIZATION_TITLE,\n    AUTOFILL_FIELD_ORGANIZATION, AUTOFILL_FIELD_COUNTRY, AUTOFILL_FIELD_COUNTRY_NAME, AUTOFILL_FIELD_POSTAL_CODE,\n    AUTOFILL_FIELD_CC_NAME, AUTOFILL_FIELD_CC_GIVEN_NAME, AUTOFILL_FIELD_CC_ADDITIONAL_NAME,\n    AUTOFILL_FIELD_CC_FAMILY_NAME, AUTOFILL_FIELD_CC_NUMBER, AUTOFILL_FIELD_CC_EXP, AUTOFILL_FIELD_CC_EXP_MONTH,\n    AUTOFILL_FIELD_CC_EXP_YEAR, AUTOFILL_FIELD_CC_CSC, AUTOFILL_FIELD_CC_TYPE, AUTOFILL_FIELD_TRANSACTION_CURRENCY,\n    AUTOFILL_FIELD_TRANSACTION_AMOUNT, AUTOFILL_FIELD_LANGUAGE, AUTOFILL_FIELD_BDAY, AUTOFILL_FIELD_BDAY_DAY,\n    AUTOFILL_FIELD_BDAY_MONTH, AUTOFILL_FIELD_BDAY_YEAR, AUTOFILL_FIELD_SEX, AUTOFILL_FIELD_URL, AUTOFILL_FIELD_PHOTO\n];\n\nexport const AUTOFILL_FIELD_TEL = \"tel\";\nexport const AUTOFILL_FIELD_TEL_COUNTRY_CODE = \"tel-country-code\";\nexport const AUTOFILL_FIELD_TEL_NATIONAL = \"tel-national\";\nexport const AUTOFILL_FIELD_TEL_AREA_CODE = \"tel-area-code\";\nexport const AUTOFILL_FIELD_TEL_LOCAL = \"tel-local\";\nexport const AUTOFILL_FIELD_TEL_LOCAL_PREFIX = \"tel-local-prefix\";\nexport const AUTOFILL_FIELD_TEL_LOCAL_SUFFIX = \"tel-local-suffix\";\nexport const AUTOFILL_FIELD_TEL_LOCAL_EXTENSION = \"tel-extension\";\nexport const AUTOFILL_FIELD_EMAIL = \"email\";\nexport const AUTOFILL_FIELD_IMPP = \"impp\";\n\nexport const AUTOFILL_FIELDS_CONTACT = [\n    AUTOFILL_FIELD_TEL, AUTOFILL_FIELD_TEL_COUNTRY_CODE, AUTOFILL_FIELD_TEL_NATIONAL, AUTOFILL_FIELD_TEL_AREA_CODE,\n    AUTOFILL_FIELD_TEL_LOCAL, AUTOFILL_FIELD_TEL_LOCAL_PREFIX, AUTOFILL_FIELD_TEL_LOCAL_SUFFIX,\n    AUTOFILL_FIELD_TEL_LOCAL_EXTENSION, AUTOFILL_FIELD_EMAIL, AUTOFILL_FIELD_IMPP\n];\n\nexport function isAddressToken(token: string): boolean {\n    return AUTOFILL_TOKENS_ADDRESS.indexOf(token) > -1;\n}\n\nexport function isContactField(token: string): boolean {\n    return AUTOFILL_FIELDS_CONTACT.indexOf(token) > -1;\n}\n\nexport function isContactToken(token: string): boolean {\n    return AUTOFILL_TOKENS_CONTACT.indexOf(token) > -1;\n}\n\nexport function isField(token: string): boolean {\n    return AUTOFILL_FIELDS.indexOf(token) > -1;\n}\n\nexport function isSectionToken(token: string): boolean {\n    return token.startsWith(\"section-\");\n}\n\nexport function validate(tokens: string): boolean {\n\n    const toExpression = (total: string, currentValue: string) => `${total}|${currentValue}`;\n    const tokensAddress = AUTOFILL_TOKENS_ADDRESS.reduce(toExpression);\n    const tokensContact = AUTOFILL_TOKENS_CONTACT.reduce(toExpression);\n    const fields = AUTOFILL_FIELDS.reduce(toExpression);\n    const fieldsContact = AUTOFILL_FIELDS_CONTACT.reduce(toExpression);\n    const regex = new RegExp(`^(section-\\\\w+\\\\s{1})?((${tokensAddress}){1}\\\\s)?((${fields}){1}|((${tokensContact}){1}\\\\s{1}(${fieldsContact})))$`);\n\n    return regex.test(tokens);\n}\n","import { CommonModule } from \"@angular/common\";\nimport { ModuleWithProviders, NgModule } from \"@angular/core\";\nimport { ReactiveFormsModule } from \"@angular/forms\";\nimport { DynamicListDirective } from \"./directive/dynamic-list.directive\";\nimport { DynamicTemplateDirective } from \"./directive/dynamic-template.directive\";\nimport { DynamicFormService } from \"./service/dynamic-form.service\";\nimport { DynamicFormLayoutService } from \"./service/dynamic-form-layout.service\";\nimport { DynamicFormValidationService } from \"./service/dynamic-form-validation.service\";\nimport { DynamicFormComponentService } from \"./service/dynamic-form-component.service\";\nimport { DynamicFormRelationService } from \"./service/dynamic-form-relation.service\";\n\n@NgModule({\n    imports: [\n        CommonModule,\n        ReactiveFormsModule\n    ],\n    declarations: [\n        DynamicListDirective,\n        DynamicTemplateDirective\n    ],\n    exports: [\n        DynamicListDirective,\n        DynamicTemplateDirective\n    ]\n})\nexport class DynamicFormsCoreModule {\n\n    /*@deprecated*/\n    static forRoot(): ModuleWithProviders<DynamicFormsCoreModule> {\n\n        return {\n            ngModule: DynamicFormsCoreModule,\n            providers: [\n                DynamicFormService,\n                DynamicFormLayoutService,\n                DynamicFormValidationService,\n                DynamicFormComponentService,\n                DynamicFormRelationService\n            ]\n        };\n    }\n}\n"]}