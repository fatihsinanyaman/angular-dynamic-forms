import { QueryList } from "@angular/core";
import * as ɵngcc0 from '@angular/core';
export class DynamicFormComponent {
    constructor(changeDetectorRef, componentService) {
        this.changeDetectorRef = changeDetectorRef;
        this.componentService = componentService;
    }
    ngOnInit() {
        this.componentService.registerForm(this);
    }
    ngOnDestroy() {
        this.componentService.unregisterForm(this);
    }
    trackByFn(_index, model) {
        return model.id;
    }
    markForCheck() {
        this.changeDetectorRef.markForCheck();
        if (this.components instanceof QueryList) {
            this.components.forEach(component => component.markForCheck());
        }
    }
    detectChanges() {
        this.changeDetectorRef.detectChanges();
    }
    onBlur($event) {
        this.blur.emit($event);
    }
    onChange($event) {
        this.change.emit($event);
    }
    onFocus($event) {
        this.focus.emit($event);
    }
    onCustomEvent($event, customEventEmitter) {
        customEventEmitter.emit($event);
    }
}
DynamicFormComponent.ɵfac = function DynamicFormComponent_Factory(t) { ɵngcc0.ɵɵinvalidFactory(); };
DynamicFormComponent.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DynamicFormComponent });

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1mb3JtLmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsibmc6L0BuZy1keW5hbWljLWZvcm1zL2NvcmUvbGliL2NvbXBvbmVudC9keW5hbWljLWZvcm0uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBc0QsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQVU5RixNQUFNLE9BQWdCLG9CQUFvQjtJQWF0QyxZQUFnQyxpQkFBb0MsRUFDcEMsZ0JBQTZDO1FBRDdDLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBbUI7UUFDcEMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUE2QjtJQUM3RSxDQUFDO0lBRUQsUUFBUTtRQUNKLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUVELFdBQVc7UUFDUCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFFRCxTQUFTLENBQUMsTUFBYyxFQUFFLEtBQThCO1FBQ3BELE9BQU8sS0FBSyxDQUFDLEVBQUUsQ0FBQztJQUNwQixDQUFDO0lBRUQsWUFBWTtRQUNSLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUV0QyxJQUFJLElBQUksQ0FBQyxVQUFVLFlBQVksU0FBUyxFQUFFO1lBQ3RDLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUM7U0FDbEU7SUFDTCxDQUFDO0lBRUQsYUFBYTtRQUNULElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUMzQyxDQUFDO0lBRUQsTUFBTSxDQUFDLE1BQStCO1FBQ2xDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzNCLENBQUM7SUFFRCxRQUFRLENBQUMsTUFBK0I7UUFDcEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDN0IsQ0FBQztJQUVELE9BQU8sQ0FBQyxNQUErQjtRQUNuQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBRUQsYUFBYSxDQUFDLE1BQStCLEVBQUUsa0JBQXlEO1FBQ3BHLGtCQUFrQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNwQyxDQUFDOzs7O0FBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgRXZlbnRFbWl0dGVyLCBPbkRlc3Ryb3ksIE9uSW5pdCwgUXVlcnlMaXN0IH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IEZvcm1Hcm91cCB9IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiO1xuaW1wb3J0IHsgRHluYW1pY0Zvcm1Db250cm9sQ29udGFpbmVyQ29tcG9uZW50IH0gZnJvbSBcIi4vZHluYW1pYy1mb3JtLWNvbnRyb2wtY29udGFpbmVyLmNvbXBvbmVudFwiO1xuaW1wb3J0IHsgRHluYW1pY0Zvcm1Db250cm9sRXZlbnQgfSBmcm9tIFwiLi9keW5hbWljLWZvcm0tY29udHJvbC1ldmVudFwiO1xuaW1wb3J0IHsgRHluYW1pY0Zvcm1Db250cm9sTW9kZWwgfSBmcm9tIFwiLi4vbW9kZWwvZHluYW1pYy1mb3JtLWNvbnRyb2wubW9kZWxcIjtcbmltcG9ydCB7IER5bmFtaWNGb3JtTW9kZWwgfSBmcm9tIFwiLi4vbW9kZWwvZHluYW1pYy1mb3JtLm1vZGVsXCI7XG5pbXBvcnQgeyBEeW5hbWljVGVtcGxhdGVEaXJlY3RpdmUgfSBmcm9tIFwiLi4vZGlyZWN0aXZlL2R5bmFtaWMtdGVtcGxhdGUuZGlyZWN0aXZlXCI7XG5pbXBvcnQgeyBEeW5hbWljRm9ybUxheW91dCB9IGZyb20gXCIuLi9zZXJ2aWNlL2R5bmFtaWMtZm9ybS1sYXlvdXQuc2VydmljZVwiO1xuaW1wb3J0IHsgRHluYW1pY0Zvcm1Db21wb25lbnRTZXJ2aWNlIH0gZnJvbSBcIi4uL3NlcnZpY2UvZHluYW1pYy1mb3JtLWNvbXBvbmVudC5zZXJ2aWNlXCI7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBEeW5hbWljRm9ybUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcblxuICAgIGdyb3VwOiBGb3JtR3JvdXA7XG4gICAgbW9kZWw6IER5bmFtaWNGb3JtTW9kZWw7XG4gICAgbGF5b3V0OiBEeW5hbWljRm9ybUxheW91dDtcblxuICAgIGNvbXBvbmVudHM6IFF1ZXJ5TGlzdDxEeW5hbWljRm9ybUNvbnRyb2xDb250YWluZXJDb21wb25lbnQ+O1xuICAgIHRlbXBsYXRlczogUXVlcnlMaXN0PER5bmFtaWNUZW1wbGF0ZURpcmVjdGl2ZT47XG5cbiAgICBibHVyOiBFdmVudEVtaXR0ZXI8RHluYW1pY0Zvcm1Db250cm9sRXZlbnQ+O1xuICAgIGNoYW5nZTogRXZlbnRFbWl0dGVyPER5bmFtaWNGb3JtQ29udHJvbEV2ZW50PjtcbiAgICBmb2N1czogRXZlbnRFbWl0dGVyPER5bmFtaWNGb3JtQ29udHJvbEV2ZW50PjtcblxuICAgIHByb3RlY3RlZCBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBwcm90ZWN0ZWQgY29tcG9uZW50U2VydmljZTogRHluYW1pY0Zvcm1Db21wb25lbnRTZXJ2aWNlKSB7XG4gICAgfVxuXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuY29tcG9uZW50U2VydmljZS5yZWdpc3RlckZvcm0odGhpcyk7XG4gICAgfVxuXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgICAgIHRoaXMuY29tcG9uZW50U2VydmljZS51bnJlZ2lzdGVyRm9ybSh0aGlzKTtcbiAgICB9XG5cbiAgICB0cmFja0J5Rm4oX2luZGV4OiBudW1iZXIsIG1vZGVsOiBEeW5hbWljRm9ybUNvbnRyb2xNb2RlbCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBtb2RlbC5pZDtcbiAgICB9XG5cbiAgICBtYXJrRm9yQ2hlY2soKTogdm9pZCB7XG4gICAgICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3JSZWYubWFya0ZvckNoZWNrKCk7XG5cbiAgICAgICAgaWYgKHRoaXMuY29tcG9uZW50cyBpbnN0YW5jZW9mIFF1ZXJ5TGlzdCkge1xuICAgICAgICAgICAgdGhpcy5jb21wb25lbnRzLmZvckVhY2goY29tcG9uZW50ID0+IGNvbXBvbmVudC5tYXJrRm9yQ2hlY2soKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkZXRlY3RDaGFuZ2VzKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmNoYW5nZURldGVjdG9yUmVmLmRldGVjdENoYW5nZXMoKTtcbiAgICB9XG5cbiAgICBvbkJsdXIoJGV2ZW50OiBEeW5hbWljRm9ybUNvbnRyb2xFdmVudCkge1xuICAgICAgICB0aGlzLmJsdXIuZW1pdCgkZXZlbnQpO1xuICAgIH1cblxuICAgIG9uQ2hhbmdlKCRldmVudDogRHluYW1pY0Zvcm1Db250cm9sRXZlbnQpIHtcbiAgICAgICAgdGhpcy5jaGFuZ2UuZW1pdCgkZXZlbnQpO1xuICAgIH1cblxuICAgIG9uRm9jdXMoJGV2ZW50OiBEeW5hbWljRm9ybUNvbnRyb2xFdmVudCkge1xuICAgICAgICB0aGlzLmZvY3VzLmVtaXQoJGV2ZW50KTtcbiAgICB9XG5cbiAgICBvbkN1c3RvbUV2ZW50KCRldmVudDogRHluYW1pY0Zvcm1Db250cm9sRXZlbnQsIGN1c3RvbUV2ZW50RW1pdHRlcjogRXZlbnRFbWl0dGVyPER5bmFtaWNGb3JtQ29udHJvbEV2ZW50Pikge1xuICAgICAgICBjdXN0b21FdmVudEVtaXR0ZXIuZW1pdCgkZXZlbnQpO1xuICAgIH1cbn1cbiJdfQ==