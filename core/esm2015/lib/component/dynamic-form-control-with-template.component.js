import { DynamicFormControlComponent } from "./dynamic-form-control.component";
import { isString } from "../utils/core.utils";
import * as ɵngcc0 from '@angular/core';
export class DynamicFormControlWithTemplateComponent extends DynamicFormControlComponent {
    constructor(layoutService, validationService) {
        super(layoutService, validationService);
        this.layoutService = layoutService;
        this.validationService = validationService;
    }
    ngAfterViewInit() {
        this.layoutService
            .filterTemplatesByModel(this.model, this.templates)
            .forEach(template => this.bindTemplate(template));
    }
    bindTemplate(template) {
        if (isString(template.as) && this.templateDirectives.has(template.as)) {
            const property = this.templateDirectives.get(template.as);
            this.viewChild[property] = this.mapTemplate(template);
        }
    }
}
DynamicFormControlWithTemplateComponent.ɵfac = function DynamicFormControlWithTemplateComponent_Factory(t) { ɵngcc0.ɵɵinvalidFactory(); };
DynamicFormControlWithTemplateComponent.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DynamicFormControlWithTemplateComponent, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1mb3JtLWNvbnRyb2wtd2l0aC10ZW1wbGF0ZS5jb21wb25lbnQuanMiLCJzb3VyY2VzIjpbIm5nOi9AbmctZHluYW1pYy1mb3Jtcy9jb3JlL2xpYi9jb21wb25lbnQvZHluYW1pYy1mb3JtLWNvbnRyb2wtd2l0aC10ZW1wbGF0ZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDL0UsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHFCQUFxQixDQUFDOztBQUkvQyxNQUFNLE9BQWdCLHVDQUF3QyxTQUFRLDJCQUEyQjtJQU83RixZQUFnQyxhQUF1QyxFQUN2QyxpQkFBK0M7UUFDM0UsS0FBSyxDQUFDLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1FBRlosa0JBQWEsR0FBYixhQUFhLENBQTBCO1FBQ3ZDLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBOEI7SUFFL0UsQ0FBQztJQUVELGVBQWU7UUFFWCxJQUFJLENBQUMsYUFBYTthQUNiLHNCQUFzQixDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQzthQUNsRCxPQUFPLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDMUQsQ0FBQztJQU1ELFlBQVksQ0FBQyxRQUFrQztRQUUzQyxJQUFJLFFBQVEsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLElBQUksSUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFFbkUsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFXLENBQUM7WUFFcEUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQ3pEO0lBQ0wsQ0FBQzs7OztBQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJWaWV3SW5pdCwgUXVlcnlMaXN0LCBUZW1wbGF0ZVJlZiB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBEeW5hbWljRm9ybUNvbnRyb2xXaXRoVGVtcGxhdGUgfSBmcm9tIFwiLi9keW5hbWljLWZvcm0tY29udHJvbC13aXRoLXRlbXBsYXRlLWludGVyZmFjZVwiO1xuaW1wb3J0IHsgRHluYW1pY1RlbXBsYXRlRGlyZWN0aXZlIH0gZnJvbSBcIi4uL2RpcmVjdGl2ZS9keW5hbWljLXRlbXBsYXRlLmRpcmVjdGl2ZVwiO1xuaW1wb3J0IHsgRHluYW1pY0Zvcm1Db250cm9sQ29tcG9uZW50IH0gZnJvbSBcIi4vZHluYW1pYy1mb3JtLWNvbnRyb2wuY29tcG9uZW50XCI7XG5pbXBvcnQgeyBpc1N0cmluZyB9IGZyb20gXCIuLi91dGlscy9jb3JlLnV0aWxzXCI7XG5pbXBvcnQgeyBEeW5hbWljRm9ybUxheW91dFNlcnZpY2UgfSBmcm9tIFwiLi4vc2VydmljZS9keW5hbWljLWZvcm0tbGF5b3V0LnNlcnZpY2VcIjtcbmltcG9ydCB7IER5bmFtaWNGb3JtVmFsaWRhdGlvblNlcnZpY2UgfSBmcm9tIFwiLi4vc2VydmljZS9keW5hbWljLWZvcm0tdmFsaWRhdGlvbi5zZXJ2aWNlXCI7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBEeW5hbWljRm9ybUNvbnRyb2xXaXRoVGVtcGxhdGVDb21wb25lbnQgZXh0ZW5kcyBEeW5hbWljRm9ybUNvbnRyb2xDb21wb25lbnRcbiAgICBpbXBsZW1lbnRzIER5bmFtaWNGb3JtQ29udHJvbFdpdGhUZW1wbGF0ZSwgQWZ0ZXJWaWV3SW5pdCB7XG5cbiAgICByZWFkb25seSB0ZW1wbGF0ZURpcmVjdGl2ZXM6IE1hcDxzdHJpbmcsIHN0cmluZz47XG5cbiAgICB0ZW1wbGF0ZXM6IFF1ZXJ5TGlzdDxEeW5hbWljVGVtcGxhdGVEaXJlY3RpdmU+IHwgRHluYW1pY1RlbXBsYXRlRGlyZWN0aXZlW10gfCB1bmRlZmluZWQ7XG5cbiAgICBwcm90ZWN0ZWQgY29uc3RydWN0b3IocHJvdGVjdGVkIGxheW91dFNlcnZpY2U6IER5bmFtaWNGb3JtTGF5b3V0U2VydmljZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdGVjdGVkIHZhbGlkYXRpb25TZXJ2aWNlOiBEeW5hbWljRm9ybVZhbGlkYXRpb25TZXJ2aWNlKSB7XG4gICAgICAgIHN1cGVyKGxheW91dFNlcnZpY2UsIHZhbGlkYXRpb25TZXJ2aWNlKTtcbiAgICB9XG5cbiAgICBuZ0FmdGVyVmlld0luaXQoKSB7XG5cbiAgICAgICAgdGhpcy5sYXlvdXRTZXJ2aWNlXG4gICAgICAgICAgICAuZmlsdGVyVGVtcGxhdGVzQnlNb2RlbCh0aGlzLm1vZGVsLCB0aGlzLnRlbXBsYXRlcylcbiAgICAgICAgICAgIC5mb3JFYWNoKHRlbXBsYXRlID0+IHRoaXMuYmluZFRlbXBsYXRlKHRlbXBsYXRlKSk7XG4gICAgfVxuXG4gICAgYWJzdHJhY3QgZ2V0IHZpZXdDaGlsZCgpOiBhbnk7XG5cbiAgICBhYnN0cmFjdCBtYXBUZW1wbGF0ZSh0ZW1wbGF0ZTogRHluYW1pY1RlbXBsYXRlRGlyZWN0aXZlKTogRHluYW1pY1RlbXBsYXRlRGlyZWN0aXZlIHwgVGVtcGxhdGVSZWY8YW55PjtcblxuICAgIGJpbmRUZW1wbGF0ZSh0ZW1wbGF0ZTogRHluYW1pY1RlbXBsYXRlRGlyZWN0aXZlKSB7XG5cbiAgICAgICAgaWYgKGlzU3RyaW5nKHRlbXBsYXRlLmFzKSAmJiB0aGlzLnRlbXBsYXRlRGlyZWN0aXZlcy5oYXModGVtcGxhdGUuYXMpKSB7XG5cbiAgICAgICAgICAgIGNvbnN0IHByb3BlcnR5ID0gdGhpcy50ZW1wbGF0ZURpcmVjdGl2ZXMuZ2V0KHRlbXBsYXRlLmFzKSBhcyBzdHJpbmc7XG5cbiAgICAgICAgICAgIHRoaXMudmlld0NoaWxkW3Byb3BlcnR5XSA9IHRoaXMubWFwVGVtcGxhdGUodGVtcGxhdGUpO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19